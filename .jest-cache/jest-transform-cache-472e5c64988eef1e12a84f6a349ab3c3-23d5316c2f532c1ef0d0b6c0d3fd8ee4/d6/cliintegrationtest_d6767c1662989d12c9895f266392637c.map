{"file":"/workspace/src/__tests__/cli.integration.test.ts","mappings":"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","names":[],"sources":["/workspace/src/__tests__/cli.integration.test.ts"],"sourcesContent":["/**\n * CLI Integration Tests - Consolidated Edition\n * \n * Focused integration tests covering all critical CLI workflows with minimal mocking.\n * Tests real file system operations and CLI command execution in temporary directories.\n * Covers 8 core scenarios: basic functionality, single/multiple assistant init, path resolution,\n * conflict handling, error cases, template verification, and cross-platform compatibility.\n */\n\nimport { execSync } from 'child_process';\nimport * as fs from 'fs-extra';\nimport * as os from 'os';\nimport * as path from 'path';\n\ndescribe('CLI Integration Tests - Consolidated', () => {\n  let testDir: string;\n  let originalCwd: string;\n  const cliPath = path.resolve(__dirname, '../../dist/cli.js');\n  \n  beforeEach(async () => {\n    // Store original working directory\n    originalCwd = process.cwd();\n    \n    // Create a temporary directory for testing\n    testDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ai-task-test-'));\n    \n    // Change to test directory\n    process.chdir(testDir);\n  });\n  \n  afterEach(async () => {\n    // Restore original working directory\n    process.chdir(originalCwd);\n    \n    // Clean up test directory\n    await fs.remove(testDir);\n  });\n\n  const executeCommand = (command: string): { stdout: string; stderr: string; exitCode: number } => {\n    try {\n      const stdout = execSync(command, { \n        encoding: 'utf8',\n        cwd: testDir,\n        stdio: ['pipe', 'pipe', 'pipe']\n      });\n      return { stdout, stderr: '', exitCode: 0 };\n    } catch (error: any) {\n      return {\n        stdout: error.stdout?.toString() || '',\n        stderr: error.stderr?.toString() || '',\n        exitCode: error.status || 1\n      };\n    }\n  };\n\n  const verifyDirectoryStructure = async (assistants: string[], customDir?: string): Promise<void> => {\n    const baseDir = customDir ? path.join(testDir, customDir) : testDir;\n    \n    // Common directories\n    expect(await fs.pathExists(path.join(baseDir, '.ai/task-manager'))).toBe(true);\n    expect(await fs.pathExists(path.join(baseDir, '.ai/task-manager/plans'))).toBe(true);\n    \n    // Assistant-specific directories and files\n    for (const assistant of assistants) {\n      const assistantDir = path.join(baseDir, `.${assistant}/commands/tasks`);\n      expect(await fs.pathExists(assistantDir)).toBe(true);\n      \n      const extension = assistant === 'gemini' ? 'toml' : 'md';\n      const templateFiles = ['create-plan', 'execute-blueprint', 'generate-tasks'];\n      \n      for (const template of templateFiles) {\n        const templatePath = path.join(assistantDir, `${template}.${extension}`);\n        expect(await fs.pathExists(templatePath)).toBe(true);\n        \n        const content = await fs.readFile(templatePath, 'utf8');\n        expect(content.length).toBeGreaterThan(0);\n      }\n    }\n    \n    // Common template files\n    expect(await fs.pathExists(path.join(baseDir, '.ai/task-manager/TASK_MANAGER_INFO.md'))).toBe(true);\n    expect(await fs.pathExists(path.join(baseDir, '.ai/task-manager/VALIDATION_GATES.md'))).toBe(true);\n  };\n\n  const verifyFileContent = async (assistants: string[], customDir?: string): Promise<void> => {\n    const baseDir = customDir ? path.join(testDir, customDir) : testDir;\n    \n    for (const assistant of assistants) {\n      if (assistant === 'claude') {\n        const createPlan = await fs.readFile(\n          path.join(baseDir, '.claude/commands/tasks/create-plan.md'), 'utf8'\n        );\n        expect(createPlan).toContain('$ARGUMENTS');\n        expect(createPlan).toContain('---'); // YAML frontmatter\n      } else if (assistant === 'gemini') {\n        const createPlan = await fs.readFile(\n          path.join(baseDir, '.gemini/commands/tasks/create-plan.toml'), 'utf8'\n        );\n        expect(createPlan).toContain('{{args}}');\n        expect(createPlan).toContain('[metadata]');\n        expect(createPlan).toContain('[prompt]');\n      }\n    }\n  };\n\n  describe('Basic CLI Functionality', () => {\n    it('should handle help, version, and error cases correctly', () => {\n      // Test help output when no arguments provided - Commander.js exits with 1\n      const noArgs = executeCommand(`node \"${cliPath}\"`);\n      expect(noArgs.exitCode).toBe(1); // Commander.js behavior for missing command\n      const noArgsOutput = noArgs.stdout + noArgs.stderr;\n      expect(noArgsOutput).toContain('ai-task-manager');\n      expect(noArgsOutput).toContain('Usage:');\n\n      // Test explicit help flag\n      const helpFlag = executeCommand(`node \"${cliPath}\" --help`);\n      expect(helpFlag.exitCode).toBe(0);\n      expect(helpFlag.stdout).toContain('ai-task-manager');\n      expect(helpFlag.stdout).toContain('init');\n\n      // Test version flag\n      const versionFlag = executeCommand(`node \"${cliPath}\" --version`);\n      expect(versionFlag.exitCode).toBe(0);\n      expect(versionFlag.stdout.trim()).toBe('0.1.0');\n    });\n  });\n\n  describe('Single Assistant Initialization', () => {\n    it('should successfully initialize with claude and verify structure', async () => {\n      const result = executeCommand(`node \"${cliPath}\" init --assistants claude`);\n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      await verifyDirectoryStructure(['claude']);\n      await verifyFileContent(['claude']);\n    });\n\n    it('should successfully initialize with gemini and verify TOML conversion', async () => {\n      const result = executeCommand(`node \"${cliPath}\" init --assistants gemini`);\n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      await verifyDirectoryStructure(['gemini']);\n      await verifyFileContent(['gemini']);\n      \n      // Verify TOML-specific content structure\n      const createPlan = await fs.readFile(path.join(testDir, '.gemini/commands/tasks/create-plan.toml'), 'utf8');\n      expect(createPlan).toContain('content = \"\"\"');\n      expect(createPlan).toContain('argument-hint = \"{{args}}\"');\n      expect(createPlan).not.toContain('$ARGUMENTS'); // Should be converted\n    });\n  });\n\n  describe('Multiple Assistant and Edge Cases', () => {\n    it('should handle multiple assistants with proper format conversion', async () => {\n      const result = executeCommand(`node \"${cliPath}\" init --assistants claude,gemini`);\n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      await verifyDirectoryStructure(['claude', 'gemini']);\n      await verifyFileContent(['claude', 'gemini']);\n      \n      // Verify no cross-contamination between formats\n      expect(await fs.pathExists(path.join(testDir, '.claude/commands/tasks/create-plan.toml'))).toBe(false);\n      expect(await fs.pathExists(path.join(testDir, '.gemini/commands/tasks/create-plan.md'))).toBe(false);\n    });\n\n    it('should handle input variations (whitespace, duplicates)', async () => {\n      // Test whitespace handling\n      const whitespace = executeCommand(`node \"${cliPath}\" init --assistants \" claude , gemini \"`);\n      expect(whitespace.exitCode).toBe(0);\n      await verifyDirectoryStructure(['claude', 'gemini']);\n      \n      // Clean up for next test\n      await fs.remove(path.join(testDir, '.ai'));\n      await fs.remove(path.join(testDir, '.claude'));\n      await fs.remove(path.join(testDir, '.gemini'));\n      \n      // Test duplicate handling\n      const duplicates = executeCommand(`node \"${cliPath}\" init --assistants claude,claude,gemini,gemini`);\n      expect(duplicates.exitCode).toBe(0);\n      await verifyDirectoryStructure(['claude', 'gemini']);\n    });\n  });\n\n  describe('Path Resolution and Directory Handling', () => {\n    it('should handle custom destination directories correctly', async () => {\n      const customDir = 'custom-project';\n      const result = executeCommand(`node \"${cliPath}\" init --assistants claude --destination-directory ${customDir}`);\n      \n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      // Verify creation in custom directory\n      await verifyDirectoryStructure(['claude'], customDir);\n      \n      // Verify NOT created in current directory\n      expect(await fs.pathExists(path.join(testDir, '.ai'))).toBe(false);\n      expect(await fs.pathExists(path.join(testDir, '.claude'))).toBe(false);\n    });\n\n    it('should handle complex path scenarios', async () => {\n      // Test nested paths\n      const nestedDir = 'level1/level2/nested-project';\n      const nestedResult = executeCommand(`node \"${cliPath}\" init --assistants claude --destination-directory ${nestedDir}`);\n      expect(nestedResult.exitCode).toBe(0);\n      await verifyDirectoryStructure(['claude'], nestedDir);\n      \n      // Test absolute paths\n      const absoluteDir = path.join(testDir, 'absolute-project');\n      const absoluteResult = executeCommand(`node \"${cliPath}\" init --assistants gemini --destination-directory \"${absoluteDir}\"`);\n      expect(absoluteResult.exitCode).toBe(0);\n      await verifyDirectoryStructure(['gemini'], 'absolute-project');\n      \n      // Test paths with spaces\n      const spacedDir = 'project with spaces';\n      const spacedResult = executeCommand(`node \"${cliPath}\" init --assistants claude --destination-directory \"${spacedDir}\"`);\n      expect(spacedResult.exitCode).toBe(0);\n      await verifyDirectoryStructure(['claude'], spacedDir);\n    });\n  });\n\n  describe('Error Handling and Validation', () => {\n    it('should handle all input validation errors correctly', () => {\n      // Missing --assistants flag - Commander handles this with exit code 1\n      const missingFlag = executeCommand(`node \"${cliPath}\" init`);\n      expect(missingFlag.exitCode).toBe(1); // Commander.js exits with 1 for missing required option\n      expect(missingFlag.stderr).toContain('required option');\n      expect(missingFlag.stderr).toContain('--assistants');\n      \n      // Invalid assistant\n      const invalidAssistant = executeCommand(`node \"${cliPath}\" init --assistants invalid`);\n      expect(invalidAssistant.exitCode).toBe(1);\n      const errorOutput = invalidAssistant.stdout + invalidAssistant.stderr;\n      expect(errorOutput).toContain('Invalid assistant');\n      expect(errorOutput).toMatch(/claude|gemini/);\n      \n      // Partially invalid assistants\n      const partiallyInvalid = executeCommand(`node \"${cliPath}\" init --assistants claude,invalid,gemini`);\n      expect(partiallyInvalid.exitCode).toBe(1);\n      const partialOutput = partiallyInvalid.stdout + partiallyInvalid.stderr;\n      expect(partialOutput).toContain('Invalid assistant');\n      expect(partialOutput).toContain('invalid');\n      \n      // Empty assistants value\n      const emptyValue = executeCommand(`node \"${cliPath}\" init --assistants \"\"`);\n      expect(emptyValue.exitCode).toBe(1);\n      const emptyOutput = emptyValue.stdout + emptyValue.stderr;\n      expect(emptyOutput).toContain('cannot be empty');\n    });\n  });\n\n  describe('Template Content Verification', () => {\n    it('should verify template files have correct structure and content', async () => {\n      executeCommand(`node \"${cliPath}\" init --assistants claude,gemini`);\n      \n      // Verify common template files\n      const taskManagerInfo = await fs.readFile(\n        path.join(testDir, '.ai/task-manager/TASK_MANAGER_INFO.md'), 'utf8'\n      );\n      expect(taskManagerInfo).toContain('# Task Manager General Information');\n      \n      const validationGates = await fs.readFile(\n        path.join(testDir, '.ai/task-manager/VALIDATION_GATES.md'), 'utf8'\n      );\n      expect(validationGates).toContain('Ensure that:');\n      \n      // Verify Claude MD template structure\n      const claudeCreatePlan = await fs.readFile(\n        path.join(testDir, '.claude/commands/tasks/create-plan.md'), 'utf8'\n      );\n      expect(claudeCreatePlan).toContain('---'); // YAML frontmatter\n      expect(claudeCreatePlan).toContain('$ARGUMENTS');\n      expect(claudeCreatePlan).toContain('argument-hint: [user-prompt]');\n      \n      // Verify Gemini TOML template structure and conversion\n      const geminiCreatePlan = await fs.readFile(\n        path.join(testDir, '.gemini/commands/tasks/create-plan.toml'), 'utf8'\n      );\n      expect(geminiCreatePlan).toContain('[metadata]');\n      expect(geminiCreatePlan).toContain('[prompt]');\n      expect(geminiCreatePlan).toContain('{{args}}');\n      expect(geminiCreatePlan).toContain('argument-hint = \"{{args}}\"');\n      expect(geminiCreatePlan).not.toContain('$ARGUMENTS'); // Should be converted\n      // Note: TOML can contain '---' in content, so we just check it has TOML structure\n      \n      // Verify TOML escaping and format\n      expect(geminiCreatePlan).toContain('content = \"\"\"');\n      const contentStart = geminiCreatePlan.indexOf('content = \"\"\"') + 'content = \"\"\"'.length;\n      const contentEnd = geminiCreatePlan.lastIndexOf('\"\"\"');\n      const content = geminiCreatePlan.substring(contentStart, contentEnd);\n      expect(content).not.toContain('\"\"\"'); // No nested triple quotes\n    });\n  });\n\n  describe('Cross-Platform Compatibility', () => {\n    it('should handle different path separators and cross-platform scenarios', async () => {\n      executeCommand(`node \"${cliPath}\" init --assistants claude`);\n      \n      // Verify directories exist regardless of platform path separator\n      const aiDir = path.join(testDir, '.ai', 'task-manager');\n      const claudeDir = path.join(testDir, '.claude', 'commands', 'tasks');\n      \n      expect(await fs.pathExists(aiDir)).toBe(true);\n      expect(await fs.pathExists(claudeDir)).toBe(true);\n      \n      // Check file accessibility with different path styles\n      const taskFile = path.join(testDir, '.claude', 'commands', 'tasks', 'create-plan.md');\n      expect(await fs.pathExists(taskFile)).toBe(true);\n      \n      const content = await fs.readFile(taskFile, 'utf8');\n      expect(content.length).toBeGreaterThan(0);\n      expect(content).not.toMatch(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/); // No binary data\n      expect(content).toMatch(/\\n/); // Proper line endings\n    });\n  });\n\n  describe('Conflict Resolution and Robustness', () => {\n    it('should handle existing directories gracefully and verify successful execution', async () => {\n      // First initialization\n      const firstResult = executeCommand(`node \"${cliPath}\" init --assistants claude`);\n      expect(firstResult.exitCode).toBe(0);\n      expect(firstResult.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      await verifyDirectoryStructure(['claude']);\n      \n      // Second initialization should also succeed (overwrite/merge scenario)\n      const secondResult = executeCommand(`node \"${cliPath}\" init --assistants gemini`);\n      expect(secondResult.exitCode).toBe(0);\n      expect(secondResult.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      // Should have both assistants now\n      await verifyDirectoryStructure(['claude', 'gemini']);\n    });\n\n    it('should handle filesystem permission scenarios gracefully', async () => {\n      // Test with non-existent parent directory (should create it)\n      const result = executeCommand(`node \"${cliPath}\" init --assistants claude --destination-directory does-not-exist/child-dir`);\n      expect(result.exitCode).toBe(0);\n      \n      // Verify parent directories were created\n      expect(await fs.pathExists(path.join(testDir, 'does-not-exist'))).toBe(true);\n      expect(await fs.pathExists(path.join(testDir, 'does-not-exist/child-dir'))).toBe(true);\n      await verifyDirectoryStructure(['claude'], 'does-not-exist/child-dir');\n    });\n  });\n\n  describe('Comprehensive End-to-End Workflow', () => {\n    it('should complete full workflow with all assistants and verify comprehensive functionality', async () => {\n      // Test complete workflow: multiple assistants + custom directory + comprehensive verification\n      const customDir = 'complete-test-project';\n      const result = executeCommand(`node \"${cliPath}\" init --assistants claude,gemini --destination-directory \"${customDir}\"`);\n      \n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('AI Task Manager initialized successfully!');\n      \n      // Comprehensive directory structure verification\n      await verifyDirectoryStructure(['claude', 'gemini'], customDir);\n      await verifyFileContent(['claude', 'gemini'], customDir);\n      \n      const baseDir = path.join(testDir, customDir);\n      \n      // Verify template variable conversion works correctly across all files\n      const templates = ['create-plan', 'execute-blueprint', 'generate-tasks'];\n      const variableTests = [\n        { template: 'create-plan', claudeVar: '$ARGUMENTS', geminiVar: '{{args}}' },\n        { template: 'execute-blueprint', claudeVar: '$1', geminiVar: '{{plan_id}}' },\n        { template: 'generate-tasks', claudeVar: '$1', geminiVar: '{{plan_id}}' }\n      ];\n      \n      for (const test of variableTests) {\n        const claudeContent = await fs.readFile(\n          path.join(baseDir, `.claude/commands/tasks/${test.template}.md`), 'utf8'\n        );\n        const geminiContent = await fs.readFile(\n          path.join(baseDir, `.gemini/commands/tasks/${test.template}.toml`), 'utf8'\n        );\n        \n        expect(claudeContent).toContain(test.claudeVar);\n        expect(geminiContent).toContain(test.geminiVar);\n        expect(geminiContent).not.toContain(test.claudeVar);\n      }\n      \n      // Verify no files were created in current directory\n      expect(await fs.pathExists(path.join(testDir, '.ai'))).toBe(false);\n      expect(await fs.pathExists(path.join(testDir, '.claude'))).toBe(false);\n      expect(await fs.pathExists(path.join(testDir, '.gemini'))).toBe(false);\n    });\n  });\n});"],"version":3}