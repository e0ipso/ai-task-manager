0a1d9376b81d46836974153476b5f6c7
"use strict";
/**
 * Helper Functions for File Operations
 *
 * This file contains utility functions for file system operations,
 * path manipulation, and other common tasks used by the CLI
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDir = ensureDir;
exports.directoryExists = directoryExists;
exports.fileExists = fileExists;
exports.exists = exists;
exports.copyTemplate = copyTemplate;
exports.writeJsonFile = writeJsonFile;
exports.readJsonFile = readJsonFile;
exports.parseAssistants = parseAssistants;
exports.validateAssistants = validateAssistants;
exports.getAbsolutePath = getAbsolutePath;
exports.getRelativePath = getRelativePath;
exports.joinPath = joinPath;
exports.getDirName = getDirName;
exports.getBaseName = getBaseName;
exports.getExtension = getExtension;
exports.getTemplateFormat = getTemplateFormat;
exports.getTemplatePath = getTemplatePath;
exports.getCreatedDirectories = getCreatedDirectories;
exports.ensureTrailingSlash = ensureTrailingSlash;
exports.sanitizeFilename = sanitizeFilename;
exports.getHomeDirectory = getHomeDirectory;
exports.remove = remove;
exports.move = move;
exports.resolvePath = resolvePath;
exports.parseFrontmatter = parseFrontmatter;
exports.escapeTomlString = escapeTomlString;
exports.convertMdToToml = convertMdToToml;
exports.readAndProcessTemplate = readAndProcessTemplate;
exports.writeProcessedTemplate = writeProcessedTemplate;
exports.getMarkdownTemplateNames = getMarkdownTemplateNames;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const types_1 = require("./types");
/**
 * Create a directory recursively if it doesn't exist
 * @param dirPath - The directory path to create
 * @throws FileSystemError if directory creation fails
 */
async function ensureDir(dirPath) {
    try {
        await fs.ensureDir(dirPath);
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to create directory: ${dirPath}`, {
            originalError: errorMessage,
            path: dirPath,
        });
    }
}
/**
 * Check if a directory exists
 * @param dirPath - The directory path to check
 * @returns Promise<boolean> - True if directory exists, false otherwise
 */
async function directoryExists(dirPath) {
    try {
        const stats = await fs.stat(dirPath);
        return stats.isDirectory();
    }
    catch (_error) {
        // If file doesn't exist or any other error, return false
        return false;
    }
}
/**
 * Check if a file exists
 * @param filePath - The file path to check
 * @returns Promise<boolean> - True if file exists, false otherwise
 */
async function fileExists(filePath) {
    try {
        const stats = await fs.stat(filePath);
        return stats.isFile();
    }
    catch (_error) {
        // If file doesn't exist or any other error, return false
        return false;
    }
}
/**
 * Check if a file or directory exists (generic)
 * @param filepath - The path to check
 * @returns Promise<boolean> - True if path exists, false otherwise
 */
async function exists(filepath) {
    try {
        await fs.access(filepath);
        return true;
    }
    catch {
        return false;
    }
}
/**
 * Copy a file or directory from source to destination
 * @param src - Source path (file or directory)
 * @param dest - Destination path
 * @param options - Copy options
 * @throws FileSystemError if copy operation fails
 */
async function copyTemplate(src, dest, options = { overwrite: true }) {
    try {
        await fs.copy(src, dest, options);
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to copy from ${src} to ${dest}`, {
            originalError: errorMessage,
            source: src,
            destination: dest,
        });
    }
}
/**
 * Write JSON data to a file with proper formatting
 * @param filePath - The file path to write to
 * @param data - The data to write as JSON
 * @throws FileSystemError if write operation fails
 */
async function writeJsonFile(filePath, data) {
    try {
        await fs.writeJson(filePath, data, { spaces: 2 });
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to write JSON file: ${filePath}`, {
            originalError: errorMessage,
            path: filePath,
        });
    }
}
/**
 * Read and parse a JSON file
 * @param filePath - The file path to read from
 * @returns The parsed JSON data
 * @throws FileSystemError if read operation fails
 */
async function readJsonFile(filePath) {
    try {
        return await fs.readJson(filePath);
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to read JSON file: ${filePath}`, {
            originalError: errorMessage,
            path: filePath,
        });
    }
}
/**
 * Parse comma-separated assistant values into an array
 * @param value - Comma-separated string of assistant names
 * @returns Array of assistant names
 * @throws Error if invalid assistant names are provided
 */
function parseAssistants(value) {
    const validAssistants = ['claude', 'gemini'];
    if (!value.trim()) {
        throw new Error('Assistants parameter cannot be empty');
    }
    const assistants = value
        .split(',')
        .map(a => a.trim().toLowerCase())
        .filter(a => a.length > 0);
    // Validate that all assistants are valid
    const invalidAssistants = assistants.filter((assistant) => !validAssistants.includes(assistant));
    if (invalidAssistants.length > 0) {
        throw new Error(`Invalid assistant(s): ${invalidAssistants.join(', ')}. Valid options are: ${validAssistants.join(', ')}`);
    }
    // Remove duplicates and return
    return Array.from(new Set(assistants));
}
/**
 * Validate that all assistants are supported
 * @param assistants - Array of assistants to validate
 * @throws Error if any assistant is invalid or array is empty
 */
function validateAssistants(assistants) {
    const validAssistants = ['claude', 'gemini'];
    if (assistants.length === 0) {
        throw new Error('At least one assistant must be specified');
    }
    for (const assistant of assistants) {
        if (!validAssistants.includes(assistant)) {
            throw new Error(`Invalid assistant: ${assistant}. Supported assistants: ${validAssistants.join(', ')}`);
        }
    }
}
/**
 * Get the absolute path for a given path, resolving it relative to the current working directory
 * @param inputPath - The input path (can be relative or absolute)
 * @returns The absolute path
 */
function getAbsolutePath(inputPath) {
    return path.isAbsolute(inputPath) ? inputPath : path.resolve(process.cwd(), inputPath);
}
/**
 * Get the relative path from one path to another
 * @param from - The source path
 * @param to - The target path
 * @returns The relative path
 */
function getRelativePath(from, to) {
    return path.relative(from, to);
}
/**
 * Join multiple path segments into a single path
 * @param segments - Path segments to join
 * @returns The joined path
 */
function joinPath(...segments) {
    return path.join(...segments);
}
/**
 * Get the directory name from a file path
 * @param filePath - The file path
 * @returns The directory name
 */
function getDirName(filePath) {
    return path.dirname(filePath);
}
/**
 * Get the base name (filename) from a file path
 * @param filePath - The file path
 * @param ext - Optional extension to remove
 * @returns The base name
 */
function getBaseName(filePath, ext) {
    return path.basename(filePath, ext);
}
/**
 * Get the file extension from a file path
 * @param filePath - The file path
 * @returns The file extension (including the dot)
 */
function getExtension(filePath) {
    return path.extname(filePath);
}
/**
 * Get the template format for a specific assistant
 * @param assistant - The assistant type
 * @returns The template format to use ('md' for Claude, 'toml' for Gemini)
 */
function getTemplateFormat(assistant) {
    switch (assistant) {
        case 'claude':
            return 'md';
        case 'gemini':
            return 'toml';
        default:
            // This should never happen due to type safety, but adding for completeness
            throw new Error(`Unknown assistant type: ${assistant}`);
    }
}
/**
 * Get the absolute path to a template file
 * @param templateFile - The template filename
 * @returns The absolute path to the template
 */
function getTemplatePath(templateFile) {
    return path.join(__dirname, '..', 'templates', templateFile);
}
/**
 * Get list of directories that will be created for given assistants
 * @param assistants - Array of assistants
 * @param baseDir - Base directory to resolve paths against (defaults to current directory)
 * @returns Array of directory paths to create
 */
function getCreatedDirectories(assistants, baseDir) {
    const base = baseDir || '.';
    const dirs = [
        resolvePath(base, '.ai/task-manager'),
        resolvePath(base, '.ai/task-manager/plans'),
    ];
    for (const assistant of assistants) {
        dirs.push(resolvePath(base, `.${assistant}`));
        dirs.push(resolvePath(base, `.${assistant}/commands`));
        dirs.push(resolvePath(base, `.${assistant}/commands/tasks`));
    }
    return dirs;
}
/**
 * Ensure a directory path ends with a path separator
 * @param dirPath - The directory path
 * @returns The directory path with trailing separator
 */
function ensureTrailingSlash(dirPath) {
    return dirPath.endsWith(path.sep) ? dirPath : dirPath + path.sep;
}
/**
 * Create a safe filename by removing or replacing invalid characters
 * @param filename - The input filename
 * @returns A safe filename for the current platform
 */
function sanitizeFilename(filename) {
    // Replace invalid characters with underscores
    return filename
        .replace(/[<>:"/\\|?*]/g, '_')
        .replace(/\s+/g, '_')
        .replace(/_+/g, '_')
        .replace(/^_|_$/g, '');
}
/**
 * Get the home directory path
 * @returns The user's home directory path
 */
function getHomeDirectory() {
    return require('os').homedir();
}
/**
 * Remove a file or directory recursively
 * @param targetPath - The path to remove
 * @throws FileSystemError if removal fails
 */
async function remove(targetPath) {
    try {
        await fs.remove(targetPath);
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to remove: ${targetPath}`, {
            originalError: errorMessage,
            path: targetPath,
        });
    }
}
/**
 * Move a file or directory from source to destination
 * @param src - Source path
 * @param dest - Destination path
 * @throws FileSystemError if move operation fails
 */
async function move(src, dest) {
    try {
        await fs.move(src, dest);
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to move from ${src} to ${dest}`, {
            originalError: errorMessage,
            source: src,
            destination: dest,
        });
    }
}
/**
 * Resolve path segments relative to a base directory with cross-platform compatibility
 * @param baseDir - The base directory (defaults to '.' if not provided, null, or undefined)
 * @param segments - Additional path segments to resolve
 * @returns The resolved absolute path
 */
function resolvePath(baseDir, ...segments) {
    // Handle edge cases: null, undefined, or empty strings
    const base = baseDir || '.';
    // Filter out any null, undefined, or empty string segments
    const validSegments = segments.filter(segment => segment !== null && segment !== undefined && segment !== '');
    return path.resolve(base, ...validSegments);
}
/**
 * Parse YAML frontmatter from markdown content
 * @param content - The markdown content with frontmatter
 * @returns Object containing frontmatter and body content
 */
function parseFrontmatter(content) {
    const frontmatterRegex = /^---\r?\n([\s\S]*?)\r?\n---(?:\r?\n([\s\S]*))?$/;
    const match = content.match(frontmatterRegex);
    if (!match) {
        return {
            frontmatter: {},
            body: content,
        };
    }
    const frontmatterContent = match[1] || '';
    const bodyContent = match[2] || ''; // match[2] is now undefined when no body exists
    // Simple YAML parser for our specific use case
    const frontmatter = {};
    const lines = frontmatterContent.split('\n');
    for (const line of lines) {
        const trimmed = line.trim();
        if (!trimmed || trimmed.startsWith('#'))
            continue;
        const colonIndex = trimmed.indexOf(':');
        if (colonIndex === -1)
            continue;
        const key = trimmed.substring(0, colonIndex).trim();
        const value = trimmed.substring(colonIndex + 1).trim();
        // Remove quotes if present
        frontmatter[key] = value.replace(/^["']|["']$/g, '');
    }
    return {
        frontmatter,
        body: bodyContent,
    };
}
/**
 * Escape a string for TOML format
 * @param str - The string to escape
 * @returns The escaped string suitable for TOML
 */
function escapeTomlString(str) {
    return str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/\t/g, '\\t');
}
/**
 * Convert markdown template content to TOML format for Gemini
 * @param mdContent - The markdown template content
 * @returns The converted TOML content
 */
function convertMdToToml(mdContent) {
    const { frontmatter, body } = parseFrontmatter(mdContent);
    // Process the body content for Gemini format
    const processedBody = body
        // Transform $ARGUMENTS → {{args}} (not followed by alphanumeric that would make it an identifier)
        .replace(/\$ARGUMENTS(?![0-9])/g, '{{args}}')
        // Transform $1 → {{plan_id}} (exact match, not part of longer number)
        .replace(/\$1(?![0-9])/g, '{{plan_id}}')
        .replace(/\$2(?![0-9])/g, '{{param2}}')
        .replace(/\$3(?![0-9])/g, '{{param3}}');
    // Build TOML content
    let tomlContent = '[metadata]\n';
    // Add frontmatter fields to metadata section
    for (const [key, value] of Object.entries(frontmatter)) {
        if (key === 'argument-hint') {
            // Special handling for argument-hint - convert to {{}} format
            const convertedHint = String(value)
                .replace(/\[plan-ID\]/g, '{{plan_id}}')
                .replace(/\[user-prompt\]/g, '{{args}}');
            tomlContent += `argument-hint = "${escapeTomlString(convertedHint)}"\n`;
        }
        else {
            tomlContent += `${key} = "${escapeTomlString(String(value))}"\n`;
        }
    }
    // Add the prompt section with escaped content
    tomlContent += '\n[prompt]\n';
    tomlContent += `content = """${escapeTomlString(processedBody)}"""\n`;
    return tomlContent;
}
/**
 * Read a markdown template file and optionally convert to TOML
 * @param templatePath - Path to the markdown template
 * @param targetFormat - Target format ('md' or 'toml')
 * @returns The template content in the requested format
 */
async function readAndProcessTemplate(templatePath, targetFormat) {
    try {
        const mdContent = await fs.readFile(templatePath, 'utf-8');
        if (targetFormat === 'md') {
            return mdContent;
        }
        else if (targetFormat === 'toml') {
            return convertMdToToml(mdContent);
        }
        else {
            throw new Error(`Unsupported template format: ${targetFormat}`);
        }
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to read and process template: ${templatePath}`, {
            originalError: errorMessage,
            path: templatePath,
            targetFormat,
        });
    }
}
/**
 * Write processed template content to destination
 * @param content - The template content to write
 * @param destPath - Destination file path
 */
async function writeProcessedTemplate(content, destPath) {
    try {
        // Ensure destination directory exists
        await fs.ensureDir(path.dirname(destPath));
        // Write the content
        await fs.writeFile(destPath, content, 'utf-8');
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to write processed template: ${destPath}`, {
            originalError: errorMessage,
            path: destPath,
        });
    }
}
/**
 * Get the names of all markdown template files in a given subdirectory of templates.
 * @param templateSubdir - The subdirectory within templates (e.g., 'commands/tasks')
 * @returns An array of template names (filenames without .md extension)
 * @throws FileSystemError if the directory cannot be read
 */
async function getMarkdownTemplateNames(templateSubdir) {
    const fullPath = path.join(__dirname, '..', 'templates', templateSubdir);
    try {
        const files = await fs.readdir(fullPath);
        return files.filter(file => file.endsWith('.md')).map(file => path.basename(file, '.md'));
    }
    catch (_error) {
        const errorMessage = _error instanceof Error ? _error.message : 'Unknown error';
        throw new types_1.FileSystemError(`Failed to read template directory: ${fullPath}`, {
            originalError: errorMessage,
            path: fullPath,
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,