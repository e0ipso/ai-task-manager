{"file":"/workspace/src/__tests__/utils.test.ts","mappings":"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","names":[],"sources":["/workspace/src/__tests__/utils.test.ts"],"sourcesContent":["/**\n * Minimal Utils Tests - Critical Business Logic Only\n *\n * Tests only functions with actual business logic that could fail silently\n * or cause data corruption. Skips simple wrappers and obvious functionality.\n */\n\nimport {\n  parseAssistants,\n  validateAssistants,\n  convertMdToToml,\n  parseFrontmatter,\n  escapeTomlString,\n} from '../utils';\nimport { Assistant } from '../types';\n\ndescribe('Critical Utils Business Logic', () => {\n  describe('parseAssistants', () => {\n    it('should parse and normalize single assistant', () => {\n      expect(parseAssistants('claude')).toEqual(['claude']);\n      expect(parseAssistants(' CLAUDE ')).toEqual(['claude']);\n    });\n\n    it('should parse multiple assistants with normalization', () => {\n      expect(parseAssistants('claude,gemini')).toEqual(['claude', 'gemini']);\n      expect(parseAssistants(' Claude , GEMINI ')).toEqual(['claude', 'gemini']);\n    });\n\n    it('should remove duplicates and empty entries', () => {\n      expect(parseAssistants('claude,claude,gemini')).toEqual(['claude', 'gemini']);\n      expect(parseAssistants('claude,,gemini,')).toEqual(['claude', 'gemini']);\n    });\n\n    it('should reject empty input', () => {\n      expect(() => parseAssistants('')).toThrow('Assistants parameter cannot be empty');\n      expect(() => parseAssistants('   ')).toThrow('Assistants parameter cannot be empty');\n    });\n\n    it('should reject invalid assistants', () => {\n      expect(() => parseAssistants('invalid')).toThrow(\n        'Invalid assistant(s): invalid. Valid options are: claude, gemini'\n      );\n      expect(() => parseAssistants('claude,invalid,unknown')).toThrow(\n        'Invalid assistant(s): invalid, unknown. Valid options are: claude, gemini'\n      );\n    });\n  });\n\n  describe('validateAssistants', () => {\n    it('should accept valid assistants', () => {\n      expect(() => validateAssistants(['claude'])).not.toThrow();\n      expect(() => validateAssistants(['claude', 'gemini'])).not.toThrow();\n    });\n\n    it('should reject empty array', () => {\n      expect(() => validateAssistants([])).toThrow('At least one assistant must be specified');\n    });\n\n    it('should reject invalid assistants', () => {\n      expect(() => validateAssistants(['invalid' as Assistant])).toThrow(\n        'Invalid assistant: invalid. Supported assistants: claude, gemini'\n      );\n    });\n  });\n\n  describe('escapeTomlString', () => {\n    it('should escape backslashes', () => {\n      expect(escapeTomlString('path\\\\to\\\\file')).toBe('path\\\\\\\\to\\\\\\\\file');\n    });\n\n    it('should escape double quotes', () => {\n      expect(escapeTomlString('say \"hello\"')).toBe('say \\\\\"hello\\\\\"');\n    });\n\n    it('should escape control characters', () => {\n      expect(escapeTomlString('line1\\nline2\\r\\tindented')).toBe('line1\\\\nline2\\\\r\\\\tindented');\n    });\n\n    it('should handle complex mixed escaping', () => {\n      const input = 'path\\\\file\\n\"quoted\"\\tvalue';\n      const expected = 'path\\\\\\\\file\\\\n\\\\\"quoted\\\\\"\\\\tvalue';\n      expect(escapeTomlString(input)).toBe(expected);\n    });\n  });\n\n  describe('parseFrontmatter', () => {\n    it('should parse valid frontmatter', () => {\n      const content = `---\ntitle: Test\ndescription: A test file\n---\nBody content here`;\n      \n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({\n        title: 'Test',\n        description: 'A test file'\n      });\n      expect(result.body).toBe('Body content here');\n    });\n\n    it('should handle quoted values', () => {\n      const content = `---\ntitle: \"Quoted Title\"\ndescription: 'Single quoted'\n---\nBody`;\n      \n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({\n        title: 'Quoted Title',\n        description: 'Single quoted'\n      });\n    });\n\n    it('should handle content without frontmatter', () => {\n      const content = 'Just body content';\n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({});\n      expect(result.body).toBe('Just body content');\n    });\n\n    it('should handle frontmatter without body', () => {\n      const content = `---\ntitle: Test\n---`;\n      \n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({ title: 'Test' });\n      expect(result.body).toBe('');\n    });\n\n    it('should ignore comments and empty lines', () => {\n      const content = `---\n# This is a comment\ntitle: Test\n\ndescription: With empty line above\n# Another comment\n---\nBody`;\n      \n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({\n        title: 'Test',\n        description: 'With empty line above'\n      });\n    });\n\n    it('should handle malformed YAML gracefully', () => {\n      const content = `---\ntitle Test without colon\nvalid: value\ninvalid-line-no-colon\n---\nBody`;\n      \n      const result = parseFrontmatter(content);\n      expect(result.frontmatter).toEqual({ valid: 'value' });\n      expect(result.body).toBe('Body');\n    });\n  });\n\n  describe('convertMdToToml', () => {\n    it('should convert basic markdown with frontmatter', () => {\n      const md = `---\ntitle: Test Command\ndescription: A test command\n---\nThis is the command content.`;\n      \n      const result = convertMdToToml(md);\n      expect(result).toContain('[metadata]');\n      expect(result).toContain('title = \"Test Command\"');\n      expect(result).toContain('description = \"A test command\"');\n      expect(result).toContain('[prompt]');\n      expect(result).toContain('content = \"\"\"This is the command content.\"\"\"');\n    });\n\n    it('should transform variable placeholders correctly', () => {\n      const md = `---\ntitle: Test\n---\nUse $ARGUMENTS for input and plan $1 for ID.\nAlso $2 and $3 parameters.\nBut $10 should not be transformed.`;\n      \n      const result = convertMdToToml(md);\n      expect(result).toContain('Use {{args}} for input and plan {{plan_id}} for ID.');\n      expect(result).toContain('Also {{param2}} and {{param3}} parameters.');\n      expect(result).toContain('But $10 should not be transformed.');\n    });\n\n    it('should handle argument-hint field specially', () => {\n      const md = `---\ntitle: Test\nargument-hint: \"[plan-ID] [user-prompt]\"\n---\nContent`;\n      \n      const result = convertMdToToml(md);\n      expect(result).toContain('argument-hint = \"{{plan_id}} {{args}}\"');\n    });\n\n    it('should escape special characters in TOML', () => {\n      const md = `---\ntitle: Title with \"quotes\" and \\\\backslashes\n---\nContent with \"quotes\" and \\\\ backslashes\nNewlines\\nand\\ttabs.`;\n      \n      const result = convertMdToToml(md);\n      expect(result).toContain('title = \"Title with \\\\\"quotes\\\\\" and \\\\\\\\backslashes\"');\n      expect(result).toContain('Content with \\\\\"quotes\\\\\" and \\\\\\\\ backslashes\\\\nNewlines\\\\nand\\\\ttabs.');\n    });\n\n    it('should handle content without frontmatter', () => {\n      const md = 'Just content without frontmatter.';\n      const result = convertMdToToml(md);\n      \n      expect(result).toContain('[metadata]');\n      expect(result).toContain('[prompt]');\n      expect(result).toContain('content = \"\"\"Just content without frontmatter.\"\"\"');\n    });\n\n    it('should preserve exact variable replacement boundaries', () => {\n      const md = `---\ntitle: Test\n---\n$ARGUMENTS but not $ARGUMENTS123\n$1 but not $12\nVariables: $ARGUMENTS, $1, $2, $3`;\n      \n      const result = convertMdToToml(md);\n      expect(result).toContain('{{args}} but not $ARGUMENTS123');\n      expect(result).toContain('{{plan_id}} but not $12');\n      expect(result).toContain('Variables: {{args}}, {{plan_id}}, {{param2}}, {{param3}}');\n    });\n  });\n});"],"version":3}