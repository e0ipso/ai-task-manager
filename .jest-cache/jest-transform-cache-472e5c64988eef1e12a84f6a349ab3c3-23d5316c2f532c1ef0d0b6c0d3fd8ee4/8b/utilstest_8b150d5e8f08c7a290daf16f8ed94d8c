794c93e2f946f481e1cbf0cf22925744
"use strict";
/**
 * Minimal Utils Tests - Critical Business Logic Only
 *
 * Tests only functions with actual business logic that could fail silently
 * or cause data corruption. Skips simple wrappers and obvious functionality.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
describe('Critical Utils Business Logic', () => {
    describe('parseAssistants', () => {
        it('should parse and normalize single assistant', () => {
            expect((0, utils_1.parseAssistants)('claude')).toEqual(['claude']);
            expect((0, utils_1.parseAssistants)(' CLAUDE ')).toEqual(['claude']);
        });
        it('should parse multiple assistants with normalization', () => {
            expect((0, utils_1.parseAssistants)('claude,gemini')).toEqual(['claude', 'gemini']);
            expect((0, utils_1.parseAssistants)(' Claude , GEMINI ')).toEqual(['claude', 'gemini']);
        });
        it('should remove duplicates and empty entries', () => {
            expect((0, utils_1.parseAssistants)('claude,claude,gemini')).toEqual(['claude', 'gemini']);
            expect((0, utils_1.parseAssistants)('claude,,gemini,')).toEqual(['claude', 'gemini']);
        });
        it('should reject empty input', () => {
            expect(() => (0, utils_1.parseAssistants)('')).toThrow('Assistants parameter cannot be empty');
            expect(() => (0, utils_1.parseAssistants)('   ')).toThrow('Assistants parameter cannot be empty');
        });
        it('should reject invalid assistants', () => {
            expect(() => (0, utils_1.parseAssistants)('invalid')).toThrow('Invalid assistant(s): invalid. Valid options are: claude, gemini');
            expect(() => (0, utils_1.parseAssistants)('claude,invalid,unknown')).toThrow('Invalid assistant(s): invalid, unknown. Valid options are: claude, gemini');
        });
    });
    describe('validateAssistants', () => {
        it('should accept valid assistants', () => {
            expect(() => (0, utils_1.validateAssistants)(['claude'])).not.toThrow();
            expect(() => (0, utils_1.validateAssistants)(['claude', 'gemini'])).not.toThrow();
        });
        it('should reject empty array', () => {
            expect(() => (0, utils_1.validateAssistants)([])).toThrow('At least one assistant must be specified');
        });
        it('should reject invalid assistants', () => {
            expect(() => (0, utils_1.validateAssistants)(['invalid'])).toThrow('Invalid assistant: invalid. Supported assistants: claude, gemini');
        });
    });
    describe('escapeTomlString', () => {
        it('should escape backslashes', () => {
            expect((0, utils_1.escapeTomlString)('path\\to\\file')).toBe('path\\\\to\\\\file');
        });
        it('should escape double quotes', () => {
            expect((0, utils_1.escapeTomlString)('say "hello"')).toBe('say \\"hello\\"');
        });
        it('should escape control characters', () => {
            expect((0, utils_1.escapeTomlString)('line1\nline2\r\tindented')).toBe('line1\\nline2\\r\\tindented');
        });
        it('should handle complex mixed escaping', () => {
            const input = 'path\\file\n"quoted"\tvalue';
            const expected = 'path\\\\file\\n\\"quoted\\"\\tvalue';
            expect((0, utils_1.escapeTomlString)(input)).toBe(expected);
        });
    });
    describe('parseFrontmatter', () => {
        it('should parse valid frontmatter', () => {
            const content = `---
title: Test
description: A test file
---
Body content here`;
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({
                title: 'Test',
                description: 'A test file'
            });
            expect(result.body).toBe('Body content here');
        });
        it('should handle quoted values', () => {
            const content = `---
title: "Quoted Title"
description: 'Single quoted'
---
Body`;
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({
                title: 'Quoted Title',
                description: 'Single quoted'
            });
        });
        it('should handle content without frontmatter', () => {
            const content = 'Just body content';
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({});
            expect(result.body).toBe('Just body content');
        });
        it('should handle frontmatter without body', () => {
            const content = `---
title: Test
---`;
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({ title: 'Test' });
            expect(result.body).toBe('');
        });
        it('should ignore comments and empty lines', () => {
            const content = `---
# This is a comment
title: Test

description: With empty line above
# Another comment
---
Body`;
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({
                title: 'Test',
                description: 'With empty line above'
            });
        });
        it('should handle malformed YAML gracefully', () => {
            const content = `---
title Test without colon
valid: value
invalid-line-no-colon
---
Body`;
            const result = (0, utils_1.parseFrontmatter)(content);
            expect(result.frontmatter).toEqual({ valid: 'value' });
            expect(result.body).toBe('Body');
        });
    });
    describe('convertMdToToml', () => {
        it('should convert basic markdown with frontmatter', () => {
            const md = `---
title: Test Command
description: A test command
---
This is the command content.`;
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('[metadata]');
            expect(result).toContain('title = "Test Command"');
            expect(result).toContain('description = "A test command"');
            expect(result).toContain('[prompt]');
            expect(result).toContain('content = """This is the command content."""');
        });
        it('should transform variable placeholders correctly', () => {
            const md = `---
title: Test
---
Use $ARGUMENTS for input and plan $1 for ID.
Also $2 and $3 parameters.
But $10 should not be transformed.`;
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('Use {{args}} for input and plan {{plan_id}} for ID.');
            expect(result).toContain('Also {{param2}} and {{param3}} parameters.');
            expect(result).toContain('But $10 should not be transformed.');
        });
        it('should handle argument-hint field specially', () => {
            const md = `---
title: Test
argument-hint: "[plan-ID] [user-prompt]"
---
Content`;
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('argument-hint = "{{plan_id}} {{args}}"');
        });
        it('should escape special characters in TOML', () => {
            const md = `---
title: Title with "quotes" and \\backslashes
---
Content with "quotes" and \\ backslashes
Newlines\nand\ttabs.`;
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('title = "Title with \\"quotes\\" and \\\\backslashes"');
            expect(result).toContain('Content with \\"quotes\\" and \\\\ backslashes\\nNewlines\\nand\\ttabs.');
        });
        it('should handle content without frontmatter', () => {
            const md = 'Just content without frontmatter.';
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('[metadata]');
            expect(result).toContain('[prompt]');
            expect(result).toContain('content = """Just content without frontmatter."""');
        });
        it('should preserve exact variable replacement boundaries', () => {
            const md = `---
title: Test
---
$ARGUMENTS but not $ARGUMENTS123
$1 but not $12
Variables: $ARGUMENTS, $1, $2, $3`;
            const result = (0, utils_1.convertMdToToml)(md);
            expect(result).toContain('{{args}} but not $ARGUMENTS123');
            expect(result).toContain('{{plan_id}} but not $12');
            expect(result).toContain('Variables: {{args}}, {{plan_id}}, {{param2}}, {{param3}}');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1FBQ3ZGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvd29ya3NwYWNlL3NyYy9fX3Rlc3RzX18vdXRpbHMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1pbmltYWwgVXRpbHMgVGVzdHMgLSBDcml0aWNhbCBCdXNpbmVzcyBMb2dpYyBPbmx5XG4gKlxuICogVGVzdHMgb25seSBmdW5jdGlvbnMgd2l0aCBhY3R1YWwgYnVzaW5lc3MgbG9naWMgdGhhdCBjb3VsZCBmYWlsIHNpbGVudGx5XG4gKiBvciBjYXVzZSBkYXRhIGNvcnJ1cHRpb24uIFNraXBzIHNpbXBsZSB3cmFwcGVycyBhbmQgb2J2aW91cyBmdW5jdGlvbmFsaXR5LlxuICovXG5cbmltcG9ydCB7XG4gIHBhcnNlQXNzaXN0YW50cyxcbiAgdmFsaWRhdGVBc3Npc3RhbnRzLFxuICBjb252ZXJ0TWRUb1RvbWwsXG4gIHBhcnNlRnJvbnRtYXR0ZXIsXG4gIGVzY2FwZVRvbWxTdHJpbmcsXG59IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IEFzc2lzdGFudCB9IGZyb20gJy4uL3R5cGVzJztcblxuZGVzY3JpYmUoJ0NyaXRpY2FsIFV0aWxzIEJ1c2luZXNzIExvZ2ljJywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFyc2VBc3Npc3RhbnRzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcGFyc2UgYW5kIG5vcm1hbGl6ZSBzaW5nbGUgYXNzaXN0YW50JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnNlQXNzaXN0YW50cygnY2xhdWRlJykpLnRvRXF1YWwoWydjbGF1ZGUnXSk7XG4gICAgICBleHBlY3QocGFyc2VBc3Npc3RhbnRzKCcgQ0xBVURFICcpKS50b0VxdWFsKFsnY2xhdWRlJ10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwYXJzZSBtdWx0aXBsZSBhc3Npc3RhbnRzIHdpdGggbm9ybWFsaXphdGlvbicsICgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJzZUFzc2lzdGFudHMoJ2NsYXVkZSxnZW1pbmknKSkudG9FcXVhbChbJ2NsYXVkZScsICdnZW1pbmknXSk7XG4gICAgICBleHBlY3QocGFyc2VBc3Npc3RhbnRzKCcgQ2xhdWRlICwgR0VNSU5JICcpKS50b0VxdWFsKFsnY2xhdWRlJywgJ2dlbWluaSddKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGR1cGxpY2F0ZXMgYW5kIGVtcHR5IGVudHJpZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFyc2VBc3Npc3RhbnRzKCdjbGF1ZGUsY2xhdWRlLGdlbWluaScpKS50b0VxdWFsKFsnY2xhdWRlJywgJ2dlbWluaSddKTtcbiAgICAgIGV4cGVjdChwYXJzZUFzc2lzdGFudHMoJ2NsYXVkZSwsZ2VtaW5pLCcpKS50b0VxdWFsKFsnY2xhdWRlJywgJ2dlbWluaSddKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGVtcHR5IGlucHV0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlQXNzaXN0YW50cygnJykpLnRvVGhyb3coJ0Fzc2lzdGFudHMgcGFyYW1ldGVyIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlQXNzaXN0YW50cygnICAgJykpLnRvVGhyb3coJ0Fzc2lzdGFudHMgcGFyYW1ldGVyIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBhc3Npc3RhbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHBhcnNlQXNzaXN0YW50cygnaW52YWxpZCcpKS50b1Rocm93KFxuICAgICAgICAnSW52YWxpZCBhc3Npc3RhbnQocyk6IGludmFsaWQuIFZhbGlkIG9wdGlvbnMgYXJlOiBjbGF1ZGUsIGdlbWluaSdcbiAgICAgICk7XG4gICAgICBleHBlY3QoKCkgPT4gcGFyc2VBc3Npc3RhbnRzKCdjbGF1ZGUsaW52YWxpZCx1bmtub3duJykpLnRvVGhyb3coXG4gICAgICAgICdJbnZhbGlkIGFzc2lzdGFudChzKTogaW52YWxpZCwgdW5rbm93bi4gVmFsaWQgb3B0aW9ucyBhcmU6IGNsYXVkZSwgZ2VtaW5pJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlQXNzaXN0YW50cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFjY2VwdCB2YWxpZCBhc3Npc3RhbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHZhbGlkYXRlQXNzaXN0YW50cyhbJ2NsYXVkZSddKSkubm90LnRvVGhyb3coKTtcbiAgICAgIGV4cGVjdCgoKSA9PiB2YWxpZGF0ZUFzc2lzdGFudHMoWydjbGF1ZGUnLCAnZ2VtaW5pJ10pKS5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgZW1wdHkgYXJyYXknLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4gdmFsaWRhdGVBc3Npc3RhbnRzKFtdKSkudG9UaHJvdygnQXQgbGVhc3Qgb25lIGFzc2lzdGFudCBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBhc3Npc3RhbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KCgpID0+IHZhbGlkYXRlQXNzaXN0YW50cyhbJ2ludmFsaWQnIGFzIEFzc2lzdGFudF0pKS50b1Rocm93KFxuICAgICAgICAnSW52YWxpZCBhc3Npc3RhbnQ6IGludmFsaWQuIFN1cHBvcnRlZCBhc3Npc3RhbnRzOiBjbGF1ZGUsIGdlbWluaSdcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlc2NhcGVUb21sU3RyaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZXNjYXBlIGJhY2tzbGFzaGVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGVzY2FwZVRvbWxTdHJpbmcoJ3BhdGhcXFxcdG9cXFxcZmlsZScpKS50b0JlKCdwYXRoXFxcXFxcXFx0b1xcXFxcXFxcZmlsZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBlc2NhcGUgZG91YmxlIHF1b3RlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChlc2NhcGVUb21sU3RyaW5nKCdzYXkgXCJoZWxsb1wiJykpLnRvQmUoJ3NheSBcXFxcXCJoZWxsb1xcXFxcIicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBlc2NhcGUgY29udHJvbCBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGVzY2FwZVRvbWxTdHJpbmcoJ2xpbmUxXFxubGluZTJcXHJcXHRpbmRlbnRlZCcpKS50b0JlKCdsaW5lMVxcXFxubGluZTJcXFxcclxcXFx0aW5kZW50ZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbXBsZXggbWl4ZWQgZXNjYXBpbmcnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9ICdwYXRoXFxcXGZpbGVcXG5cInF1b3RlZFwiXFx0dmFsdWUnO1xuICAgICAgY29uc3QgZXhwZWN0ZWQgPSAncGF0aFxcXFxcXFxcZmlsZVxcXFxuXFxcXFwicXVvdGVkXFxcXFwiXFxcXHR2YWx1ZSc7XG4gICAgICBleHBlY3QoZXNjYXBlVG9tbFN0cmluZyhpbnB1dCkpLnRvQmUoZXhwZWN0ZWQpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGFyc2VGcm9udG1hdHRlcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHBhcnNlIHZhbGlkIGZyb250bWF0dGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IGAtLS1cbnRpdGxlOiBUZXN0XG5kZXNjcmlwdGlvbjogQSB0ZXN0IGZpbGVcbi0tLVxuQm9keSBjb250ZW50IGhlcmVgO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBwYXJzZUZyb250bWF0dGVyKGNvbnRlbnQpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mcm9udG1hdHRlcikudG9FcXVhbCh7XG4gICAgICAgIHRpdGxlOiAnVGVzdCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSB0ZXN0IGZpbGUnXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYm9keSkudG9CZSgnQm9keSBjb250ZW50IGhlcmUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHF1b3RlZCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gYC0tLVxudGl0bGU6IFwiUXVvdGVkIFRpdGxlXCJcbmRlc2NyaXB0aW9uOiAnU2luZ2xlIHF1b3RlZCdcbi0tLVxuQm9keWA7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlRnJvbnRtYXR0ZXIoY29udGVudCk7XG4gICAgICBleHBlY3QocmVzdWx0LmZyb250bWF0dGVyKS50b0VxdWFsKHtcbiAgICAgICAgdGl0bGU6ICdRdW90ZWQgVGl0bGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1NpbmdsZSBxdW90ZWQnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbnRlbnQgd2l0aG91dCBmcm9udG1hdHRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSAnSnVzdCBib2R5IGNvbnRlbnQnO1xuICAgICAgY29uc3QgcmVzdWx0ID0gcGFyc2VGcm9udG1hdHRlcihjb250ZW50KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZnJvbnRtYXR0ZXIpLnRvRXF1YWwoe30pO1xuICAgICAgZXhwZWN0KHJlc3VsdC5ib2R5KS50b0JlKCdKdXN0IGJvZHkgY29udGVudCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZnJvbnRtYXR0ZXIgd2l0aG91dCBib2R5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IGAtLS1cbnRpdGxlOiBUZXN0XG4tLS1gO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBwYXJzZUZyb250bWF0dGVyKGNvbnRlbnQpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mcm9udG1hdHRlcikudG9FcXVhbCh7IHRpdGxlOiAnVGVzdCcgfSk7XG4gICAgICBleHBlY3QocmVzdWx0LmJvZHkpLnRvQmUoJycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpZ25vcmUgY29tbWVudHMgYW5kIGVtcHR5IGxpbmVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IGAtLS1cbiMgVGhpcyBpcyBhIGNvbW1lbnRcbnRpdGxlOiBUZXN0XG5cbmRlc2NyaXB0aW9uOiBXaXRoIGVtcHR5IGxpbmUgYWJvdmVcbiMgQW5vdGhlciBjb21tZW50XG4tLS1cbkJvZHlgO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBwYXJzZUZyb250bWF0dGVyKGNvbnRlbnQpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mcm9udG1hdHRlcikudG9FcXVhbCh7XG4gICAgICAgIHRpdGxlOiAnVGVzdCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnV2l0aCBlbXB0eSBsaW5lIGFib3ZlJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtYWxmb3JtZWQgWUFNTCBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IGAtLS1cbnRpdGxlIFRlc3Qgd2l0aG91dCBjb2xvblxudmFsaWQ6IHZhbHVlXG5pbnZhbGlkLWxpbmUtbm8tY29sb25cbi0tLVxuQm9keWA7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlRnJvbnRtYXR0ZXIoY29udGVudCk7XG4gICAgICBleHBlY3QocmVzdWx0LmZyb250bWF0dGVyKS50b0VxdWFsKHsgdmFsaWQ6ICd2YWx1ZScgfSk7XG4gICAgICBleHBlY3QocmVzdWx0LmJvZHkpLnRvQmUoJ0JvZHknKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnZlcnRNZFRvVG9tbCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvbnZlcnQgYmFzaWMgbWFya2Rvd24gd2l0aCBmcm9udG1hdHRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IG1kID0gYC0tLVxudGl0bGU6IFRlc3QgQ29tbWFuZFxuZGVzY3JpcHRpb246IEEgdGVzdCBjb21tYW5kXG4tLS1cblRoaXMgaXMgdGhlIGNvbW1hbmQgY29udGVudC5gO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBjb252ZXJ0TWRUb1RvbWwobWQpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdbbWV0YWRhdGFdJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3RpdGxlID0gXCJUZXN0IENvbW1hbmRcIicpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdkZXNjcmlwdGlvbiA9IFwiQSB0ZXN0IGNvbW1hbmRcIicpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdbcHJvbXB0XScpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdjb250ZW50ID0gXCJcIlwiVGhpcyBpcyB0aGUgY29tbWFuZCBjb250ZW50LlwiXCJcIicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0cmFuc2Zvcm0gdmFyaWFibGUgcGxhY2Vob2xkZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1kID0gYC0tLVxudGl0bGU6IFRlc3Rcbi0tLVxuVXNlICRBUkdVTUVOVFMgZm9yIGlucHV0IGFuZCBwbGFuICQxIGZvciBJRC5cbkFsc28gJDIgYW5kICQzIHBhcmFtZXRlcnMuXG5CdXQgJDEwIHNob3VsZCBub3QgYmUgdHJhbnNmb3JtZWQuYDtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gY29udmVydE1kVG9Ub21sKG1kKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignVXNlIHt7YXJnc319IGZvciBpbnB1dCBhbmQgcGxhbiB7e3BsYW5faWR9fSBmb3IgSUQuJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ0Fsc28ge3twYXJhbTJ9fSBhbmQge3twYXJhbTN9fSBwYXJhbWV0ZXJzLicpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdCdXQgJDEwIHNob3VsZCBub3QgYmUgdHJhbnNmb3JtZWQuJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBhcmd1bWVudC1oaW50IGZpZWxkIHNwZWNpYWxseScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1kID0gYC0tLVxudGl0bGU6IFRlc3RcbmFyZ3VtZW50LWhpbnQ6IFwiW3BsYW4tSURdIFt1c2VyLXByb21wdF1cIlxuLS0tXG5Db250ZW50YDtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gY29udmVydE1kVG9Ub21sKG1kKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignYXJndW1lbnQtaGludCA9IFwie3twbGFuX2lkfX0ge3thcmdzfX1cIicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIFRPTUwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZCA9IGAtLS1cbnRpdGxlOiBUaXRsZSB3aXRoIFwicXVvdGVzXCIgYW5kIFxcXFxiYWNrc2xhc2hlc1xuLS0tXG5Db250ZW50IHdpdGggXCJxdW90ZXNcIiBhbmQgXFxcXCBiYWNrc2xhc2hlc1xuTmV3bGluZXNcXG5hbmRcXHR0YWJzLmA7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnZlcnRNZFRvVG9tbChtZCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3RpdGxlID0gXCJUaXRsZSB3aXRoIFxcXFxcInF1b3Rlc1xcXFxcIiBhbmQgXFxcXFxcXFxiYWNrc2xhc2hlc1wiJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ0NvbnRlbnQgd2l0aCBcXFxcXCJxdW90ZXNcXFxcXCIgYW5kIFxcXFxcXFxcIGJhY2tzbGFzaGVzXFxcXG5OZXdsaW5lc1xcXFxuYW5kXFxcXHR0YWJzLicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29udGVudCB3aXRob3V0IGZyb250bWF0dGVyJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWQgPSAnSnVzdCBjb250ZW50IHdpdGhvdXQgZnJvbnRtYXR0ZXIuJztcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnZlcnRNZFRvVG9tbChtZCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignW21ldGFkYXRhXScpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdbcHJvbXB0XScpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdjb250ZW50ID0gXCJcIlwiSnVzdCBjb250ZW50IHdpdGhvdXQgZnJvbnRtYXR0ZXIuXCJcIlwiJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByZXNlcnZlIGV4YWN0IHZhcmlhYmxlIHJlcGxhY2VtZW50IGJvdW5kYXJpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZCA9IGAtLS1cbnRpdGxlOiBUZXN0XG4tLS1cbiRBUkdVTUVOVFMgYnV0IG5vdCAkQVJHVU1FTlRTMTIzXG4kMSBidXQgbm90ICQxMlxuVmFyaWFibGVzOiAkQVJHVU1FTlRTLCAkMSwgJDIsICQzYDtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gY29udmVydE1kVG9Ub21sKG1kKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigne3thcmdzfX0gYnV0IG5vdCAkQVJHVU1FTlRTMTIzJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3t7cGxhbl9pZH19IGJ1dCBub3QgJDEyJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ1ZhcmlhYmxlczoge3thcmdzfX0sIHt7cGxhbl9pZH19LCB7e3BhcmFtMn19LCB7e3BhcmFtM319Jyk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9