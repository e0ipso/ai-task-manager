82e835dc298858a28539dad7d8cc0b06
"use strict";
/**
 * TypeScript Type Definitions
 *
 * This file contains all TypeScript interfaces, types, and enums
 * used throughout the AI Task Manager CLI application
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystemError = exports.AssistantError = exports.TaskError = exports.ConfigError = exports.TaskManagerError = void 0;
/**
 * Error types for better error handling
 */
class TaskManagerError extends Error {
    constructor(message, code, details) {
        super(message);
        this.code = code;
        this.details = details;
        this.name = 'TaskManagerError';
    }
}
exports.TaskManagerError = TaskManagerError;
/**
 * Configuration validation error
 */
class ConfigError extends TaskManagerError {
    constructor(message, details) {
        super(message, 'CONFIG_ERROR', details);
        this.name = 'ConfigError';
    }
}
exports.ConfigError = ConfigError;
/**
 * Task operation error
 */
class TaskError extends TaskManagerError {
    constructor(message, details) {
        super(message, 'TASK_ERROR', details);
        this.name = 'TaskError';
    }
}
exports.TaskError = TaskError;
/**
 * Assistant integration error
 */
class AssistantError extends TaskManagerError {
    constructor(message, details) {
        super(message, 'ASSISTANT_ERROR', details);
        this.name = 'AssistantError';
    }
}
exports.AssistantError = AssistantError;
/**
 * File system operation error
 */
class FileSystemError extends TaskManagerError {
    constructor(message, details) {
        super(message, 'FILESYSTEM_ERROR', details);
        this.name = 'FileSystemError';
    }
}
exports.FileSystemError = FileSystemError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,