{"file":"/workspace/src/types.ts","mappings":";AAAA;;;;;GAKG;;;AAgMH;;GAEG;AACH,MAAa,gBAAiB,SAAQ,KAAK;IACzC,YACE,OAAe,EACR,IAAY,EACZ,OAAiC;QAExC,KAAK,CAAC,OAAO,CAAC,CAAC;QAHR,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAA0B;QAGxC,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACjC,CAAC;CACF;AATD,4CASC;AAED;;GAEG;AACH,MAAa,WAAY,SAAQ,gBAAgB;IAC/C,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;IAC5B,CAAC;CACF;AALD,kCAKC;AAED;;GAEG;AACH,MAAa,SAAU,SAAQ,gBAAgB;IAC7C,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;IAC1B,CAAC;CACF;AALD,8BAKC;AAED;;GAEG;AACH,MAAa,cAAe,SAAQ,gBAAgB;IAClD,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC/B,CAAC;CACF;AALD,wCAKC;AAED;;GAEG;AACH,MAAa,eAAgB,SAAQ,gBAAgB;IACnD,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;IAChC,CAAC;CACF;AALD,0CAKC","names":[],"sources":["/workspace/src/types.ts"],"sourcesContent":["/**\n * TypeScript Type Definitions\n *\n * This file contains all TypeScript interfaces, types, and enums\n * used throughout the AI Task Manager CLI application\n */\n\n/**\n * Supported AI assistants for task management\n */\nexport type Assistant = 'claude' | 'gemini';\n\n/**\n * Template format types for different assistants\n */\nexport type TemplateFormat = 'md' | 'toml';\n\n/**\n * Options for the init command\n */\nexport interface InitOptions {\n  /**\n   * Comma-separated list of assistants to configure\n   */\n  assistants: string;\n  /**\n   * Optional destination directory for the configuration\n   */\n  destinationDirectory?: string;\n}\n\n/**\n * Configuration for directory structure\n */\nexport interface DirectoryConfig {\n  /**\n   * Path to the directory\n   */\n  path: string;\n  /**\n   * Optional list of files to create in the directory\n   */\n  files?: string[];\n}\n\n/**\n * Task status enumeration\n */\nexport type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';\n\n/**\n * Task priority levels\n */\nexport type TaskPriority = 'low' | 'medium' | 'high' | 'urgent';\n\n/**\n * Individual task definition\n */\nexport interface Task {\n  /**\n   * Unique identifier for the task\n   */\n  id: string;\n  /**\n   * Task title/name\n   */\n  title: string;\n  /**\n   * Detailed task description\n   */\n  description?: string;\n  /**\n   * Current status of the task\n   */\n  status: TaskStatus;\n  /**\n   * Task priority level\n   */\n  priority: TaskPriority;\n  /**\n   * Task creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n  /**\n   * Optional due date\n   */\n  dueDate?: Date;\n  /**\n   * Tags associated with the task\n   */\n  tags: string[];\n  /**\n   * AI assistant assigned to the task\n   */\n  assignedTo?: Assistant;\n}\n\n/**\n * Task list configuration\n */\nexport interface TaskList {\n  /**\n   * List name/identifier\n   */\n  name: string;\n  /**\n   * List description\n   */\n  description?: string;\n  /**\n   * Tasks in the list\n   */\n  tasks: Task[];\n  /**\n   * Creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n}\n\n/**\n * CLI command options base interface\n */\nexport interface BaseCommandOptions {\n  /**\n   * Enable verbose logging\n   */\n  verbose?: boolean;\n  /**\n   * Dry run mode - show what would be done without executing\n   */\n  dryRun?: boolean;\n}\n\n/**\n * Assistant configuration\n */\nexport interface AssistantConfig {\n  /**\n   * Assistant type\n   */\n  type: Assistant;\n  /**\n   * API endpoint URL\n   */\n  endpoint?: string;\n  /**\n   * API key for authentication\n   */\n  apiKey?: string;\n  /**\n   * Model name/version to use\n   */\n  model?: string;\n  /**\n   * Additional configuration options\n   */\n  options?: Record<string, unknown>;\n}\n\n/**\n * Project configuration\n */\nexport interface ProjectConfig {\n  /**\n   * Project name\n   */\n  name: string;\n  /**\n   * Project description\n   */\n  description?: string;\n  /**\n   * Default assistant for the project\n   */\n  defaultAssistant?: Assistant;\n  /**\n   * Configured assistants\n   */\n  assistants: AssistantConfig[];\n  /**\n   * Project creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Configuration file version\n   */\n  version: string;\n}\n\n/**\n * Error types for better error handling\n */\nexport class TaskManagerError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'TaskManagerError';\n  }\n}\n\n/**\n * Configuration validation error\n */\nexport class ConfigError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'CONFIG_ERROR', details);\n    this.name = 'ConfigError';\n  }\n}\n\n/**\n * Task operation error\n */\nexport class TaskError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'TASK_ERROR', details);\n    this.name = 'TaskError';\n  }\n}\n\n/**\n * Assistant integration error\n */\nexport class AssistantError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'ASSISTANT_ERROR', details);\n    this.name = 'AssistantError';\n  }\n}\n\n/**\n * File system operation error\n */\nexport class FileSystemError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'FILESYSTEM_ERROR', details);\n    this.name = 'FileSystemError';\n  }\n}\n\n/**\n * Validation result interface\n */\nexport interface ValidationResult {\n  /**\n   * Whether validation passed\n   */\n  valid: boolean;\n  /**\n   * Validation errors if any\n   */\n  errors: string[];\n  /**\n   * Validation warnings if any\n   */\n  warnings: string[];\n}\n\n/**\n * Command execution result\n */\nexport interface CommandResult {\n  /**\n   * Whether command executed successfully\n   */\n  success: boolean;\n  /**\n   * Result message\n   */\n  message: string;\n  /**\n   * Additional data from command execution\n   */\n  data?: unknown;\n  /**\n   * Error information if command failed\n   */\n  error?: Error;\n}\n"],"version":3}