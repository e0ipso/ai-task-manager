7dd1108719aac49c7b08aaa7e5d6ca8e
"use strict";

/**
 * TypeScript Type Definitions
 *
 * This file contains all TypeScript interfaces, types, and enums
 * used throughout the AI Task Manager CLI application
 */
/* istanbul ignore next */
function cov_23gnw5l8py() {
  var path = "/workspace/src/types.ts";
  var hash = "9c097973f5256636b650fea1e6dee54b15b4140f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspace/src/types.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 127
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 23
        }
      },
      "3": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 31
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 39
        }
      },
      "6": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 44
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 48
        }
      },
      "8": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "9": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "11": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 32
        }
      },
      "12": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 30
        }
      },
      "13": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 51
        }
      },
      "14": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "15": {
        start: {
          line: 51,
          column: 0
        },
        end: {
          line: 51,
          column: 40
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 52
        }
      },
      "17": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 38
        }
      },
      "18": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 61,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 40
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 34
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 34
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 34
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 56
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {},
    inputSourceMap: {
      file: "/workspace/src/types.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAgMH;;GAEG;AACH,MAAa,gBAAiB,SAAQ,KAAK;IACzC,YACE,OAAe,EACR,IAAY,EACZ,OAAiC;QAExC,KAAK,CAAC,OAAO,CAAC,CAAC;QAHR,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAA0B;QAGxC,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACjC,CAAC;CACF;AATD,4CASC;AAED;;GAEG;AACH,MAAa,WAAY,SAAQ,gBAAgB;IAC/C,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;IAC5B,CAAC;CACF;AALD,kCAKC;AAED;;GAEG;AACH,MAAa,SAAU,SAAQ,gBAAgB;IAC7C,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;IAC1B,CAAC;CACF;AALD,8BAKC;AAED;;GAEG;AACH,MAAa,cAAe,SAAQ,gBAAgB;IAClD,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC/B,CAAC;CACF;AALD,wCAKC;AAED;;GAEG;AACH,MAAa,eAAgB,SAAQ,gBAAgB;IACnD,YAAY,OAAe,EAAE,OAAiC;QAC5D,KAAK,CAAC,OAAO,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;IAChC,CAAC;CACF;AALD,0CAKC",
      names: [],
      sources: ["/workspace/src/types.ts"],
      sourcesContent: ["/**\n * TypeScript Type Definitions\n *\n * This file contains all TypeScript interfaces, types, and enums\n * used throughout the AI Task Manager CLI application\n */\n\n/**\n * Supported AI assistants for task management\n */\nexport type Assistant = 'claude' | 'gemini';\n\n/**\n * Template format types for different assistants\n */\nexport type TemplateFormat = 'md' | 'toml';\n\n/**\n * Options for the init command\n */\nexport interface InitOptions {\n  /**\n   * Comma-separated list of assistants to configure\n   */\n  assistants: string;\n  /**\n   * Optional destination directory for the configuration\n   */\n  destinationDirectory?: string;\n}\n\n/**\n * Configuration for directory structure\n */\nexport interface DirectoryConfig {\n  /**\n   * Path to the directory\n   */\n  path: string;\n  /**\n   * Optional list of files to create in the directory\n   */\n  files?: string[];\n}\n\n/**\n * Task status enumeration\n */\nexport type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';\n\n/**\n * Task priority levels\n */\nexport type TaskPriority = 'low' | 'medium' | 'high' | 'urgent';\n\n/**\n * Individual task definition\n */\nexport interface Task {\n  /**\n   * Unique identifier for the task\n   */\n  id: string;\n  /**\n   * Task title/name\n   */\n  title: string;\n  /**\n   * Detailed task description\n   */\n  description?: string;\n  /**\n   * Current status of the task\n   */\n  status: TaskStatus;\n  /**\n   * Task priority level\n   */\n  priority: TaskPriority;\n  /**\n   * Task creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n  /**\n   * Optional due date\n   */\n  dueDate?: Date;\n  /**\n   * Tags associated with the task\n   */\n  tags: string[];\n  /**\n   * AI assistant assigned to the task\n   */\n  assignedTo?: Assistant;\n}\n\n/**\n * Task list configuration\n */\nexport interface TaskList {\n  /**\n   * List name/identifier\n   */\n  name: string;\n  /**\n   * List description\n   */\n  description?: string;\n  /**\n   * Tasks in the list\n   */\n  tasks: Task[];\n  /**\n   * Creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n}\n\n/**\n * CLI command options base interface\n */\nexport interface BaseCommandOptions {\n  /**\n   * Enable verbose logging\n   */\n  verbose?: boolean;\n  /**\n   * Dry run mode - show what would be done without executing\n   */\n  dryRun?: boolean;\n}\n\n/**\n * Assistant configuration\n */\nexport interface AssistantConfig {\n  /**\n   * Assistant type\n   */\n  type: Assistant;\n  /**\n   * API endpoint URL\n   */\n  endpoint?: string;\n  /**\n   * API key for authentication\n   */\n  apiKey?: string;\n  /**\n   * Model name/version to use\n   */\n  model?: string;\n  /**\n   * Additional configuration options\n   */\n  options?: Record<string, unknown>;\n}\n\n/**\n * Project configuration\n */\nexport interface ProjectConfig {\n  /**\n   * Project name\n   */\n  name: string;\n  /**\n   * Project description\n   */\n  description?: string;\n  /**\n   * Default assistant for the project\n   */\n  defaultAssistant?: Assistant;\n  /**\n   * Configured assistants\n   */\n  assistants: AssistantConfig[];\n  /**\n   * Project creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Configuration file version\n   */\n  version: string;\n}\n\n/**\n * Error types for better error handling\n */\nexport class TaskManagerError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'TaskManagerError';\n  }\n}\n\n/**\n * Configuration validation error\n */\nexport class ConfigError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'CONFIG_ERROR', details);\n    this.name = 'ConfigError';\n  }\n}\n\n/**\n * Task operation error\n */\nexport class TaskError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'TASK_ERROR', details);\n    this.name = 'TaskError';\n  }\n}\n\n/**\n * Assistant integration error\n */\nexport class AssistantError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'ASSISTANT_ERROR', details);\n    this.name = 'AssistantError';\n  }\n}\n\n/**\n * File system operation error\n */\nexport class FileSystemError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'FILESYSTEM_ERROR', details);\n    this.name = 'FileSystemError';\n  }\n}\n\n/**\n * Validation result interface\n */\nexport interface ValidationResult {\n  /**\n   * Whether validation passed\n   */\n  valid: boolean;\n  /**\n   * Validation errors if any\n   */\n  errors: string[];\n  /**\n   * Validation warnings if any\n   */\n  warnings: string[];\n}\n\n/**\n * Command execution result\n */\nexport interface CommandResult {\n  /**\n   * Whether command executed successfully\n   */\n  success: boolean;\n  /**\n   * Result message\n   */\n  message: string;\n  /**\n   * Additional data from command execution\n   */\n  data?: unknown;\n  /**\n   * Error information if command failed\n   */\n  error?: Error;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c097973f5256636b650fea1e6dee54b15b4140f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23gnw5l8py = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23gnw5l8py();
cov_23gnw5l8py().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23gnw5l8py().s[1]++;
exports.FileSystemError = exports.AssistantError = exports.TaskError = exports.ConfigError = exports.TaskManagerError = void 0;
/**
 * Error types for better error handling
 */
class TaskManagerError extends Error {
  constructor(message, code, details) {
    /* istanbul ignore next */
    cov_23gnw5l8py().f[0]++;
    cov_23gnw5l8py().s[2]++;
    super(message);
    /* istanbul ignore next */
    cov_23gnw5l8py().s[3]++;
    this.code = code;
    /* istanbul ignore next */
    cov_23gnw5l8py().s[4]++;
    this.details = details;
    /* istanbul ignore next */
    cov_23gnw5l8py().s[5]++;
    this.name = 'TaskManagerError';
  }
}
/* istanbul ignore next */
cov_23gnw5l8py().s[6]++;
exports.TaskManagerError = TaskManagerError;
/**
 * Configuration validation error
 */
class ConfigError extends TaskManagerError {
  constructor(message, details) {
    /* istanbul ignore next */
    cov_23gnw5l8py().f[1]++;
    cov_23gnw5l8py().s[7]++;
    super(message, 'CONFIG_ERROR', details);
    /* istanbul ignore next */
    cov_23gnw5l8py().s[8]++;
    this.name = 'ConfigError';
  }
}
/* istanbul ignore next */
cov_23gnw5l8py().s[9]++;
exports.ConfigError = ConfigError;
/**
 * Task operation error
 */
class TaskError extends TaskManagerError {
  constructor(message, details) {
    /* istanbul ignore next */
    cov_23gnw5l8py().f[2]++;
    cov_23gnw5l8py().s[10]++;
    super(message, 'TASK_ERROR', details);
    /* istanbul ignore next */
    cov_23gnw5l8py().s[11]++;
    this.name = 'TaskError';
  }
}
/* istanbul ignore next */
cov_23gnw5l8py().s[12]++;
exports.TaskError = TaskError;
/**
 * Assistant integration error
 */
class AssistantError extends TaskManagerError {
  constructor(message, details) {
    /* istanbul ignore next */
    cov_23gnw5l8py().f[3]++;
    cov_23gnw5l8py().s[13]++;
    super(message, 'ASSISTANT_ERROR', details);
    /* istanbul ignore next */
    cov_23gnw5l8py().s[14]++;
    this.name = 'AssistantError';
  }
}
/* istanbul ignore next */
cov_23gnw5l8py().s[15]++;
exports.AssistantError = AssistantError;
/**
 * File system operation error
 */
class FileSystemError extends TaskManagerError {
  constructor(message, details) {
    /* istanbul ignore next */
    cov_23gnw5l8py().f[4]++;
    cov_23gnw5l8py().s[16]++;
    super(message, 'FILESYSTEM_ERROR', details);
    /* istanbul ignore next */
    cov_23gnw5l8py().s[17]++;
    this.name = 'FileSystemError';
  }
}
/* istanbul ignore next */
cov_23gnw5l8py().s[18]++;
exports.FileSystemError = FileSystemError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,