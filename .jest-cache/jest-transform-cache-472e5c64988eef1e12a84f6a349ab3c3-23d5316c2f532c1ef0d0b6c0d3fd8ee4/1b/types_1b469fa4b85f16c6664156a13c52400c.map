{"version":3,"names":["cov_23gnw5l8py","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","TaskManagerError","Error","constructor","message","code","details","exports","ConfigError","TaskError","AssistantError","FileSystemError"],"sources":["/workspace/src/types.ts"],"sourcesContent":["/**\n * TypeScript Type Definitions\n *\n * This file contains all TypeScript interfaces, types, and enums\n * used throughout the AI Task Manager CLI application\n */\n\n/**\n * Supported AI assistants for task management\n */\nexport type Assistant = 'claude' | 'gemini';\n\n/**\n * Template format types for different assistants\n */\nexport type TemplateFormat = 'md' | 'toml';\n\n/**\n * Options for the init command\n */\nexport interface InitOptions {\n  /**\n   * Comma-separated list of assistants to configure\n   */\n  assistants: string;\n  /**\n   * Optional destination directory for the configuration\n   */\n  destinationDirectory?: string;\n}\n\n/**\n * Configuration for directory structure\n */\nexport interface DirectoryConfig {\n  /**\n   * Path to the directory\n   */\n  path: string;\n  /**\n   * Optional list of files to create in the directory\n   */\n  files?: string[];\n}\n\n/**\n * Task status enumeration\n */\nexport type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';\n\n/**\n * Task priority levels\n */\nexport type TaskPriority = 'low' | 'medium' | 'high' | 'urgent';\n\n/**\n * Individual task definition\n */\nexport interface Task {\n  /**\n   * Unique identifier for the task\n   */\n  id: string;\n  /**\n   * Task title/name\n   */\n  title: string;\n  /**\n   * Detailed task description\n   */\n  description?: string;\n  /**\n   * Current status of the task\n   */\n  status: TaskStatus;\n  /**\n   * Task priority level\n   */\n  priority: TaskPriority;\n  /**\n   * Task creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n  /**\n   * Optional due date\n   */\n  dueDate?: Date;\n  /**\n   * Tags associated with the task\n   */\n  tags: string[];\n  /**\n   * AI assistant assigned to the task\n   */\n  assignedTo?: Assistant;\n}\n\n/**\n * Task list configuration\n */\nexport interface TaskList {\n  /**\n   * List name/identifier\n   */\n  name: string;\n  /**\n   * List description\n   */\n  description?: string;\n  /**\n   * Tasks in the list\n   */\n  tasks: Task[];\n  /**\n   * Creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Last update timestamp\n   */\n  updatedAt: Date;\n}\n\n/**\n * CLI command options base interface\n */\nexport interface BaseCommandOptions {\n  /**\n   * Enable verbose logging\n   */\n  verbose?: boolean;\n  /**\n   * Dry run mode - show what would be done without executing\n   */\n  dryRun?: boolean;\n}\n\n/**\n * Assistant configuration\n */\nexport interface AssistantConfig {\n  /**\n   * Assistant type\n   */\n  type: Assistant;\n  /**\n   * API endpoint URL\n   */\n  endpoint?: string;\n  /**\n   * API key for authentication\n   */\n  apiKey?: string;\n  /**\n   * Model name/version to use\n   */\n  model?: string;\n  /**\n   * Additional configuration options\n   */\n  options?: Record<string, unknown>;\n}\n\n/**\n * Project configuration\n */\nexport interface ProjectConfig {\n  /**\n   * Project name\n   */\n  name: string;\n  /**\n   * Project description\n   */\n  description?: string;\n  /**\n   * Default assistant for the project\n   */\n  defaultAssistant?: Assistant;\n  /**\n   * Configured assistants\n   */\n  assistants: AssistantConfig[];\n  /**\n   * Project creation timestamp\n   */\n  createdAt: Date;\n  /**\n   * Configuration file version\n   */\n  version: string;\n}\n\n/**\n * Error types for better error handling\n */\nexport class TaskManagerError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = 'TaskManagerError';\n  }\n}\n\n/**\n * Configuration validation error\n */\nexport class ConfigError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'CONFIG_ERROR', details);\n    this.name = 'ConfigError';\n  }\n}\n\n/**\n * Task operation error\n */\nexport class TaskError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'TASK_ERROR', details);\n    this.name = 'TaskError';\n  }\n}\n\n/**\n * Assistant integration error\n */\nexport class AssistantError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'ASSISTANT_ERROR', details);\n    this.name = 'AssistantError';\n  }\n}\n\n/**\n * File system operation error\n */\nexport class FileSystemError extends TaskManagerError {\n  constructor(message: string, details?: Record<string, unknown>) {\n    super(message, 'FILESYSTEM_ERROR', details);\n    this.name = 'FileSystemError';\n  }\n}\n\n/**\n * Validation result interface\n */\nexport interface ValidationResult {\n  /**\n   * Whether validation passed\n   */\n  valid: boolean;\n  /**\n   * Validation errors if any\n   */\n  errors: string[];\n  /**\n   * Validation warnings if any\n   */\n  warnings: string[];\n}\n\n/**\n * Command execution result\n */\nexport interface CommandResult {\n  /**\n   * Whether command executed successfully\n   */\n  success: boolean;\n  /**\n   * Result message\n   */\n  message: string;\n  /**\n   * Additional data from command execution\n   */\n  data?: unknown;\n  /**\n   * Error information if command failed\n   */\n  error?: Error;\n}\n"],"mappings":"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","ignoreList":[]}