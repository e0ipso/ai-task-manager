name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, master]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.vscode/**'
      - '.gitignore'
      - 'LICENSE'
      - '.editorconfig'
  workflow_dispatch:
    inputs:
      performance_baseline:
        description: 'Update performance baseline'
        required: false
        default: 'false'
        type: boolean
      skip_cache:
        description: 'Skip cache for testing'
        required: false
        default: 'false'
        type: boolean

env:
  PERFORMANCE_TRACKING: true
  CACHE_MONITORING: true
  NODE_OPTIONS: '--max-old-space-size=4096'
  CI: true

jobs:
  validate:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    outputs:
      cache-hit-rate: ${{ steps.performance-metrics.outputs.cache-hit-rate }}
      execution-time: ${{ steps.performance-metrics.outputs.execution-time }}
      test-duration: ${{ steps.performance-metrics.outputs.test-duration }}
      node-modules-size: ${{ steps.performance-metrics.outputs.node-modules-size }}
    
    steps:
      - name: Initialize Performance Tracking
        id: perf-init
        run: |
          echo "WORKFLOW_START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "STEP_START_TIME=$(date +%s)" >> $GITHUB_ENV
          echo "JOB_ID=validate-${{ matrix.node-version }}" >> $GITHUB_ENV
          echo "🚀 Starting performance tracking for validation job"
          echo "Node Version: ${{ matrix.node-version }}"
          echo "Runner: ${{ runner.os }}-${{ runner.arch }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Track Checkout Performance
        run: |
          echo "CHECKOUT_END_TIME=$(date +%s)" >> $GITHUB_ENV
          CHECKOUT_DURATION=$(($(date +%s) - $STEP_START_TIME))
          echo "📥 Checkout completed in ${CHECKOUT_DURATION}s"
          echo "checkout-duration=${CHECKOUT_DURATION}" >> $GITHUB_OUTPUT
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache npm dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          if [[ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "📦 Cache hit! Using cached dependencies"
            # Verify node_modules integrity and reinstall if needed
            if ! npm ls --depth=0 &>/dev/null; then
              echo "⚠️  Cache corrupted, running fresh install"
              rm -rf node_modules
              npm ci
            else
              echo "✅ Cache valid, skipping install"
            fi
          else
            echo "📥 Cache miss, installing dependencies"
            npm ci
          fi
      
      - name: Cache performance metrics
        if: always()
        run: |
          echo "=== NPM Cache Performance Metrics ==="
          echo "Cache Status: ${{ steps.npm-cache.outputs.cache-hit && 'HIT' || 'MISS' }}"
          echo "Cache Key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('package-lock.json') }}"
          echo "Node Version: ${{ matrix.node-version }}"
          echo "Runner OS: ${{ runner.os }}"
          if [[ -d "node_modules" ]]; then
            echo "Node Modules Size: $(du -sh node_modules | cut -f1)"
            echo "Dependencies Count: $(ls node_modules | wc -l)"
          fi
          echo "====================================="
      
      - name: Validate package files
        run: |
          echo "Validating package.json and package-lock.json..."
          npm ls --depth=0
      
      - name: Run Jest tests with coverage
        id: jest-tests
        continue-on-error: true
        run: |
          echo "Running Jest test suite with coverage..."
          npm test -- --coverage --ci --watchAll=false --passWithNoTests --testLocationInResults --outputFile=test-results.json --json 2>&1 | tee jest-output.log
          echo "TEST_EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        env:
          CI: true
          FORCE_COLOR: true

      - name: Parse test results and create annotations
        if: always()
        run: |
          # Create annotations for test failures
          if [[ -f "test-results.json" ]]; then
            echo "Parsing test results for annotations..."
            node -e "
              try {
                const results = JSON.parse(require('fs').readFileSync('test-results.json', 'utf8'));
                
                if (results.testResults) {
                  results.testResults.forEach(testFile => {
                    if (testFile.assertionResults) {
                      testFile.assertionResults.forEach(test => {
                        if (test.status === 'failed') {
                          const filePath = testFile.name.replace(process.cwd() + '/', '');
                          const line = test.location ? test.location.line : 1;
                          console.log('::error file=' + filePath + ',line=' + line + '::Test failed: ' + test.fullName);
                          if (test.failureMessages && test.failureMessages.length > 0) {
                            test.failureMessages.forEach(msg => {
                              console.log('::error::' + msg.replace(/\n/g, '%0A'));
                            });
                          }
                        }
                      });
                    }
                  });
                }
                
                // Summary statistics
                if (results.numFailedTests > 0) {
                  console.log('::error::' + results.numFailedTests + ' test(s) failed out of ' + results.numTotalTests + ' total tests');
                } else if (results.numTotalTests > 0) {
                  console.log('::notice::All ' + results.numTotalTests + ' tests passed successfully!');
                }
              } catch (e) {
                console.log('::warning::Could not parse test results for annotations: ' + e.message);
              }
            "
          else
            echo "::warning::Test results file not found, skipping detailed annotations"
          fi

      - name: Generate test coverage report
        if: always()
        run: |
          if [[ -d "coverage" ]]; then
            echo "=== Test Coverage Summary ==="
            if [[ -f "coverage/coverage-summary.json" ]]; then
              node -e "
                const coverage = require('./coverage/coverage-summary.json');
                const total = coverage.total;
                console.log('Lines: ' + total.lines.pct + '% (' + total.lines.covered + '/' + total.lines.total + ')');
                console.log('Functions: ' + total.functions.pct + '% (' + total.functions.covered + '/' + total.functions.total + ')');
                console.log('Branches: ' + total.branches.pct + '% (' + total.branches.covered + '/' + total.branches.total + ')');
                console.log('Statements: ' + total.statements.pct + '% (' + total.statements.covered + '/' + total.statements.total + ')');
                
                // Create coverage annotations
                ['lines', 'functions', 'branches', 'statements'].forEach(metric => {
                  const pct = total[metric].pct;
                  const threshold = 70; // matches jest.config.js
                  if (pct < threshold) {
                    console.log('::error::Coverage threshold not met for ' + metric + ': ' + pct + '% < ' + threshold + '%');
                  } else {
                    console.log('::notice::Coverage threshold met for ' + metric + ': ' + pct + '% >= ' + threshold + '%');
                  }
                });
              "
            fi
            echo "==========================="
          else
            echo "::warning::No coverage data generated"
          fi

      - name: Upload test coverage to GitHub
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.json
            jest-output.log
          retention-days: 7

      - name: Check test results and fail job if needed
        if: always()
        run: |
          if [[ "${{ steps.jest-tests.outputs.TEST_EXIT_CODE }}" != "0" ]]; then
            echo "::error::Jest tests failed with exit code ${{ steps.jest-tests.outputs.TEST_EXIT_CODE }}"
            echo "::notice::Run 'npm test' locally to reproduce the test failures."
            echo "::notice::Check the uploaded artifacts for detailed test results and coverage reports."
            exit 1
          else
            echo "::notice::All tests passed successfully!"
          fi

      - name: Basic validation checks
        run: |
          echo "Running basic validation checks..."
          echo "✓ Dependencies installed successfully"
          echo "✓ Package structure validated"
          echo "✓ Jest tests executed"
          echo "Pull request validation completed"

  lint:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache npm dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          if [[ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "📦 Cache hit! Using cached dependencies"
            # Verify node_modules integrity and reinstall if needed
            if ! npm ls --depth=0 &>/dev/null; then
              echo "⚠️  Cache corrupted, running fresh install"
              rm -rf node_modules
              npm ci
            else
              echo "✅ Cache valid, skipping install"
            fi
          else
            echo "📥 Cache miss, installing dependencies"
            npm ci
          fi
      
      - name: Run ESLint
        run: |
          echo "🔍 Running ESLint validation..."
          npm run lint
        continue-on-error: false
      
      - name: Check Prettier formatting
        run: |
          echo "✨ Checking Prettier formatting..."
          # Check if files are properly formatted
          if ! npm run format -- --check; then
            echo "❌ Code formatting issues detected!"
            echo ""
            echo "The following files are not properly formatted:"
            npm run format -- --check 2>&1 | grep -E "^\[warn\]" || true
            echo ""
            echo "To fix formatting issues, run:"
            echo "  npm run format"
            echo ""
            echo "Or configure your editor to format on save using Prettier."
            exit 1
          else
            echo "✅ All files are properly formatted"
          fi
        continue-on-error: false
      
      - name: Annotate linting results
        if: failure()
        run: |
          echo "::group::Code Quality Check Failed"
          echo "❌ ESLint or Prettier validation failed."
          echo ""
          echo "## Common Solutions:"
          echo ""
          echo "### For ESLint errors:"
          echo "- Run \`npm run lint\` locally to see detailed error messages"
          echo "- Run \`npm run lint:fix\` to automatically fix many issues"
          echo "- Check TypeScript compilation: \`npm run build\`"
          echo ""
          echo "### For Prettier formatting issues:"
          echo "- Run \`npm run format\` to auto-format all files"
          echo "- Configure your editor to format on save"
          echo "- Ensure your editor uses the project's .prettierrc configuration"
          echo ""
          echo "### TypeScript-specific issues:"
          echo "- Check for unused variables (prefix with underscore _ to ignore)"
          echo "- Ensure proper type definitions"
          echo "- Verify import/export statements"
          echo ""
          echo "For detailed error information, check the step logs above."
          echo "::endgroup::"
          echo "::error::Code quality checks failed. Please fix linting or formatting issues before merging."

  typescript:
    name: TypeScript Build & Type Check
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Cache npm dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-npm-
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          if [[ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "📦 Cache hit! Using cached dependencies"
            if ! npm ls --depth=0 &>/dev/null; then
              echo "⚠️  Cache corrupted, running fresh install"
              rm -rf node_modules
              npm ci
            else
              echo "✅ Cache valid, skipping install"
            fi
          else
            echo "📥 Cache miss, installing dependencies"
            npm ci
          fi
      
      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: |
            dist
            .tsbuildinfo
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-ts-${{ hashFiles('src/**/*.ts', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-ts-
      
      - name: Clean previous build
        run: |
          echo "🧹 Cleaning previous build artifacts..."
          npm run clean || true
      
      - name: TypeScript Type Check
        run: |
          echo "🔍 Running TypeScript type checking..."
          echo "Using TypeScript configuration from tsconfig.json"
          echo "=== TypeScript Configuration ==="
          cat tsconfig.json | jq '.' || cat tsconfig.json
          echo "============================="
          
          # Run type checking without emitting files
          npx tsc --noEmit --pretty
          
          if [ $? -eq 0 ]; then
            echo "✅ TypeScript type checking passed!"
          else
            echo "❌ TypeScript type checking failed!"
            echo ""
            echo "=== Type Check Debugging Information ==="
            echo "TypeScript version: $(npx tsc --version)"
            echo "Files being checked:"
            find src -name "*.ts" | head -10
            echo ""
            echo "Common TypeScript errors and solutions:"
            echo "• Type errors: Check variable types and function signatures"
            echo "• Import/export issues: Verify module paths and exports"
            echo "• Missing declarations: Install @types packages if needed"
            echo "• Strict mode violations: Review compiler options in tsconfig.json"
            echo "======================================="
            exit 1
          fi
      
      - name: TypeScript Build
        run: |
          echo "🔨 Building TypeScript project..."
          npm run build
          
          if [ $? -eq 0 ]; then
            echo "✅ TypeScript build completed successfully!"
          else
            echo "❌ TypeScript build failed!"
            echo ""
            echo "=== Build Debugging Information ==="
            echo "Build script: $(npm run build --silent 2>&1 | head -1 || echo 'npm run build')"
            echo "Output directory should be: dist/"
            echo "Source directory: src/"
            echo "================================="
            exit 1
          fi
      
      - name: Validate Build Artifacts
        run: |
          echo "📋 Validating build artifacts..."
          
          # Check if dist directory exists
          if [ ! -d "dist" ]; then
            echo "❌ Build output directory 'dist' not found!"
            echo "Expected output directory based on tsconfig.json: dist/"
            exit 1
          fi
          
          # Check if CLI entry point exists (main binary)
          if [ ! -f "dist/cli.js" ]; then
            echo "❌ CLI entry point 'dist/cli.js' not found!"
            echo "This is required by package.json bin configuration."
            exit 1
          else
            echo "✅ CLI entry point found: dist/cli.js"
          fi
          
          # Check for main entry point (optional, may not exist for CLI-only packages)
          if [ -f "dist/index.js" ]; then
            echo "✅ Main entry point found: dist/index.js"
          else
            echo "ℹ️  Main entry point 'dist/index.js' not found (OK for CLI-only packages)"
          fi
          
          # Check if declaration files are generated
          if [ -n "$(find dist -name "*.d.ts" | head -1)" ]; then
            echo "✅ TypeScript declaration files generated"
            echo "Declaration files count: $(find dist -name "*.d.ts" | wc -l)"
          else
            echo "⚠️  No TypeScript declaration files found"
          fi
          
          # Check if source maps are generated
          if [ -n "$(find dist -name "*.js.map" | head -1)" ]; then
            echo "✅ Source maps generated"
            echo "Source map files count: $(find dist -name "*.js.map" | wc -l)"
          else
            echo "⚠️  No source maps found"
          fi
          
          # Show build output structure
          echo ""
          echo "=== Build Output Structure ==="
          find dist -type f | sort
          echo "============================"
          
          # Show build size information
          echo ""
          echo "=== Build Size Information ==="
          du -sh dist
          echo "Total files: $(find dist -type f | wc -l)"
          echo "JavaScript files: $(find dist -name "*.js" | wc -l)"
          echo "Declaration files: $(find dist -name "*.d.ts" | wc -l)"
          echo "Source map files: $(find dist -name "*.js.map" | wc -l)"
          echo "=========================="
          
          echo "✅ Build artifact validation completed successfully!"
      
      - name: Test Build Execution
        run: |
          echo "🧪 Testing build execution..."
          
          # Make CLI executable
          chmod +x dist/cli.js
          
          # Test basic CLI execution (help command or version)
          echo "Testing CLI help command..."
          if node dist/cli.js --help; then
            echo "✅ CLI help command executed successfully"
          else
            echo "⚠️  CLI help command failed (may be expected if CLI requires setup)"
          fi
          
          # Test if the built files are syntactically correct
          echo "Validating JavaScript syntax of built files..."
          for js_file in $(find dist -name "*.js"); do
            if node -c "$js_file"; then
              echo "✅ Syntax valid: $js_file"
            else
              echo "❌ Syntax error in: $js_file"
              exit 1
            fi
          done
          
          echo "✅ Build execution test completed!"
      
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typescript-build-${{ matrix.node-version }}
          path: dist/
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: validate
    if: always()
    
    steps:
      - name: Download coverage artifacts
        if: needs.validate.result != 'cancelled'
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-report-*
          path: coverage-artifacts/
          merge-multiple: true

      - name: Generate test summary
        if: needs.validate.result != 'cancelled'
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate.result }}" == "success" ]]; then
            echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.validate.result }}" == "failure" ]]; then
            echo "❌ **Some tests failed. Please review the logs above.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Execution Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework**: Jest with TypeScript" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: Reports generated and uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Versions**: 18.x, 20.x, 22.x" >> $GITHUB_STEP_SUMMARY
          
          # Add coverage summary if available
          if [[ -f "coverage-artifacts/coverage-summary.json" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
            node -e "
              try {
                const coverage = require('./coverage-artifacts/coverage-summary.json');
                const total = coverage.total;
                console.log('| Metric | Coverage |');
                console.log('|--------|----------|');
                console.log('| Lines | ' + total.lines.pct + '% |');
                console.log('| Functions | ' + total.functions.pct + '% |');
                console.log('| Branches | ' + total.branches.pct + '% |');
                console.log('| Statements | ' + total.statements.pct + '% |');
              } catch(e) {
                console.log('Coverage summary not available');
              }
            " >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Restore npm dependencies cache
        id: npm-cache-security
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-20.x-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-npm-
            ${{ runner.os }}-node-20.x-
            ${{ runner.os }}-node-
      
      - name: Install dependencies for security scan
        run: |
          if [[ "${{ steps.npm-cache-security.outputs.cache-hit }}" == "true" ]]; then
            echo "📦 Using cached dependencies for security scan"
            if ! npm ls --depth=0 &>/dev/null; then
              echo "⚠️  Cache corrupted, running fresh install"
              rm -rf node_modules
              npm ci
            fi
          else
            echo "📥 Installing dependencies for security scan"
            npm ci
          fi
      
      - name: Run npm audit
        id: npm-audit
        run: |
          echo "🔍 Running npm audit for dependency vulnerabilities..."
          
          # Run npm audit and capture output
          npm audit --json > audit-results.json || true
          
          # Check audit results and extract metrics
          VULNERABILITIES=$(cat audit-results.json | jq -r '.metadata.vulnerabilities // empty')
          
          if [[ -n "$VULNERABILITIES" ]]; then
            LOW=$(echo $VULNERABILITIES | jq -r '.low // 0')
            MODERATE=$(echo $VULNERABILITIES | jq -r '.moderate // 0')
            HIGH=$(echo $VULNERABILITIES | jq -r '.high // 0')
            CRITICAL=$(echo $VULNERABILITIES | jq -r '.critical // 0')
            
            echo "vulnerability-summary<<EOF" >> $GITHUB_OUTPUT
            echo "🔍 **Security Audit Results**" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "| Severity | Count |" >> $GITHUB_OUTPUT
            echo "|----------|-------|" >> $GITHUB_OUTPUT
            echo "| Critical | $CRITICAL |" >> $GITHUB_OUTPUT
            echo "| High     | $HIGH |" >> $GITHUB_OUTPUT
            echo "| Moderate | $MODERATE |" >> $GITHUB_OUTPUT
            echo "| Low      | $LOW |" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Set individual metrics for threshold checking
            echo "critical-count=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high-count=$HIGH" >> $GITHUB_OUTPUT
            echo "total-high-critical=$((HIGH + CRITICAL))" >> $GITHUB_OUTPUT
            
            if [[ $CRITICAL -gt 0 || $HIGH -gt 0 ]]; then
              echo "has-high-critical=true" >> $GITHUB_OUTPUT
              echo "❌ Found $CRITICAL critical and $HIGH high severity vulnerabilities"
            else
              echo "has-high-critical=false" >> $GITHUB_OUTPUT
              echo "✅ No critical or high severity vulnerabilities found"
            fi
          else
            echo "vulnerability-summary=✅ **No vulnerabilities found**" >> $GITHUB_OUTPUT
            echo "critical-count=0" >> $GITHUB_OUTPUT
            echo "high-count=0" >> $GITHUB_OUTPUT
            echo "total-high-critical=0" >> $GITHUB_OUTPUT
            echo "has-high-critical=false" >> $GITHUB_OUTPUT
            echo "✅ No vulnerabilities found"
          fi
      
      - name: Generate detailed vulnerability report
        if: steps.npm-audit.outputs.has-high-critical == 'true'
        run: |
          echo "📋 Generating detailed vulnerability report..."
          
          # Create detailed report
          cat > vulnerability-report.md << 'EOF'
          # 🚨 Security Vulnerabilities Found
          
          This pull request introduces or maintains dependencies with security vulnerabilities.
          
          ## Summary
          EOF
          
          echo "${{ steps.npm-audit.outputs.vulnerability-summary }}" >> vulnerability-report.md
          
          cat >> vulnerability-report.md << 'EOF'
          
          ## Detailed Findings
          EOF
          
          # Extract detailed vulnerability information
          cat audit-results.json | jq -r '
            if .vulnerabilities then
              .vulnerabilities | to_entries[] | 
              select(.value.severity == "critical" or .value.severity == "high") |
              "### " + .key + " (" + .value.severity + ")\n" +
              "- **Range**: " + (.value.range // "N/A") + "\n" +
              "- **Recommendation**: " + (.value.fixAvailable | if . then "Run `npm audit fix`" else "Manual review required" end) + "\n" +
              "- **More info**: " + (.value.url // "N/A") + "\n"
            else
              ""
            end
          ' >> vulnerability-report.md
          
          cat >> vulnerability-report.md << 'EOF'
          
          ## Remediation Steps
          
          1. **Immediate Action Required**: This PR cannot be merged with critical or high severity vulnerabilities
          2. **Run Audit Fix**: Try running `npm audit fix` to automatically fix vulnerabilities
          3. **Manual Review**: For vulnerabilities that cannot be auto-fixed:
             - Review the vulnerability details above
             - Update to a secure version of the dependency
             - Consider alternative packages if no fix is available
          4. **Re-run Security Scan**: After fixes, push changes to re-trigger security scanning
          
          ## Commands to Fix
          
          ```bash
          # Attempt automatic fixes
          npm audit fix
          
          # For high-risk fixes that require breaking changes
          npm audit fix --force
          
          # View detailed audit report
          npm audit
          ```
          EOF
          
          echo "Generated detailed vulnerability report:"
          cat vulnerability-report.md
      
      - name: Check GitHub Security Advisories
        id: github-security
        run: |
          echo "🔍 Checking GitHub Security Advisories..."
          
          # Use GitHub's built-in security advisory database
          # This checks against the same database used by Dependabot
          gh api graphql --field query='
          {
            securityVulnerabilities(first: 100, ecosystem: NPM) {
              nodes {
                advisory {
                  ghsaId
                  summary
                  severity
                  publishedAt
                }
                package {
                  name
                }
                vulnerableVersionRange
              }
            }
          }' > github-advisories.json 2>/dev/null || echo "⚠️ Could not fetch GitHub Security Advisories (may require GITHUB_TOKEN with appropriate permissions)"
          
          echo "github-advisory-check=completed" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Security scan performance metrics
        if: always()
        run: |
          echo "=== Security Scan Performance Metrics ==="
          echo "Cache Status: ${{ steps.npm-cache-security.outputs.cache-hit && 'HIT' || 'MISS' }}"
          echo "Node Version: 20.x"
          echo "Critical Vulnerabilities: ${{ steps.npm-audit.outputs.critical-count }}"
          echo "High Vulnerabilities: ${{ steps.npm-audit.outputs.high-count }}"
          echo "Total High/Critical: ${{ steps.npm-audit.outputs.total-high-critical }}"
          echo "GitHub Advisory Check: ${{ steps.github-security.outputs.github-advisory-check }}"
          
          if [[ -f audit-results.json ]]; then
            echo "Audit File Size: $(du -h audit-results.json | cut -f1)"
          fi
          
          echo "===================================="
      
      - name: Upload security scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            audit-results.json
            vulnerability-report.md
            github-advisories.json
          retention-days: 30
      
      - name: Comment on PR with security results
        if: github.event_name == 'pull_request' && steps.npm-audit.outputs.has-high-critical == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let reportContent = '# 🔒 Security Scan Results\n\n';
            reportContent += '${{ steps.npm-audit.outputs.vulnerability-summary }}\n\n';
            
            if (fs.existsSync('vulnerability-report.md')) {
              const detailedReport = fs.readFileSync('vulnerability-report.md', 'utf8');
              reportContent += detailedReport;
            }
            
            reportContent += '\n---\n';
            reportContent += '🤖 This comment was automatically generated by the security scanning workflow.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportContent
            });
      
      - name: Fail on high/critical vulnerabilities
        if: steps.npm-audit.outputs.has-high-critical == 'true'
        run: |
          echo "❌ Security scan failed: Found ${{ steps.npm-audit.outputs.total-high-critical }} high or critical severity vulnerabilities"
          echo ""
          echo "This pull request cannot be merged until security vulnerabilities are resolved."
          echo "Please review the detailed vulnerability report and follow the remediation steps."
          echo ""
          echo "Critical: ${{ steps.npm-audit.outputs.critical-count }}"
          echo "High: ${{ steps.npm-audit.outputs.high-count }}"
          echo ""
          exit 1

  matrix-report:
    name: Matrix Test Report
    runs-on: ubuntu-latest
    needs: [validate, lint, typescript]
    if: always()
    
    steps:
      - name: Generate matrix results summary
        run: |
          echo "## 🔧 Matrix Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Node.js Version Compatibility" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Node 18.x | Node 20.x | Node 22.x |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-----------|-----------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Validation results
          VALIDATE_STATUS="${{ needs.validate.result }}"
          if [[ "$VALIDATE_STATUS" == "success" ]]; then
            echo "| Tests & Validation | ✅ | ✅ | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests & Validation | ❓ | ❓ | ❓ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lint results
          LINT_STATUS="${{ needs.lint.result }}"
          if [[ "$LINT_STATUS" == "success" ]]; then
            echo "| Code Quality | ✅ | ✅ | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Code Quality | ❓ | ❓ | ❓ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # TypeScript results
          TS_STATUS="${{ needs.typescript.result }}"
          if [[ "$TS_STATUS" == "success" ]]; then
            echo "| TypeScript Build | ✅ | ✅ | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| TypeScript Build | ❓ | ❓ | ❓ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall matrix summary
          if [[ "$VALIDATE_STATUS" == "success" && "$LINT_STATUS" == "success" && "$TS_STATUS" == "success" ]]; then
            echo "✅ **All Node.js versions passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The project is compatible with Node.js 18.x, 20.x, and 22.x" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some Node.js versions failed testing**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Review the individual job logs above for version-specific issues." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Matrix Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution**: Enabled with fail-fast disabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Failure Isolation**: Each Node.js version runs independently" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching Strategy**: Version-specific dependency and build caching" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Optimization**: Parallel job execution for efficiency" >> $GITHUB_STEP_SUMMARY

  status-check:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [validate, lint, typescript, test-summary, security-scan, matrix-report]
    if: always()
    
    steps:
      - name: Check all job results
        run: |
          echo "=== Pull Request Validation Summary ==="
          echo "Validation Result: ${{ needs.validate.result }}"
          echo "Linting Result: ${{ needs.lint.result }}"
          echo "TypeScript Result: ${{ needs.typescript.result }}"
          echo "Test Summary Result: ${{ needs.test-summary.result }}"
          echo "Security Scan Result: ${{ needs.security-scan.result }}"
          echo "Matrix Report Result: ${{ needs.matrix-report.result }}"
          echo "======================================="
          
          # Check if all critical jobs passed
          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.typescript.result }}" == "success" && "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All checks passed - PR ready for review"
            echo ""
            echo "### Completed Checks:"
            echo "• Dependencies installation and caching"
            echo "• Jest tests with coverage reporting (Node.js 18.x, 20.x, 22.x)"
            echo "• ESLint code quality validation (Node.js 18.x, 20.x, 22.x)"
            echo "• Prettier formatting validation (Node.js 18.x, 20.x, 22.x)"
            echo "• TypeScript type checking and compilation (Node.js 18.x, 20.x, 22.x)"
            echo "• Build artifact validation (Node.js 18.x, 20.x, 22.x)"
            echo "• CLI execution testing (Node.js 18.x, 20.x, 22.x)"
            echo "• Security vulnerability scanning"
            echo "• Dependency audit and GitHub Security Advisory checks"
            echo "• Matrix testing compatibility report"
            echo ""
            echo "status=success" >> $GITHUB_ENV
            exit 0
          else
            echo "❌ One or more checks failed:"
            if [[ "${{ needs.validate.result }}" != "success" ]]; then
              echo "  - Validation and testing checks failed"
            fi
            if [[ "${{ needs.lint.result }}" != "success" ]]; then
              echo "  - Code quality/linting checks failed"
            fi
            if [[ "${{ needs.typescript.result }}" != "success" ]]; then
              echo "  - TypeScript compilation checks failed"
            fi
            if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
              echo "  - Security scan failed (vulnerabilities found)"
            fi
            echo ""
            echo "Please review the job outputs above and address any issues."
            echo "For security vulnerabilities, check the detailed report in the security-scan job."
            echo ""
            echo "status=failure" >> $GITHUB_ENV
            exit 1
          fi