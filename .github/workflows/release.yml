name: Automated Release

# This workflow handles automated releases using semantic-release
# It only runs on the main/master branch after successful CI validation
on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/pr-validation.yml'
      - '.gitignore'
      - 'LICENSE'

# Ensure only one release runs at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  # Enable color output for better readability
  FORCE_COLOR: true
  # CI environment for semantic-release
  CI: true

jobs:
  # First, verify that CI passed for this commit
  verify-ci:
    name: Verify CI Status
    runs-on: ubuntu-latest
    outputs:
      ci-status: ${{ steps.check-ci.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check CI status for commit
        id: check-ci
        run: |
          echo "üîç Checking CI status for commit ${{ github.sha }}"
          
          # Wait a moment for CI workflows to register
          sleep 10
          
          # Get all check runs for this commit
          CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs')
          
          # Check if PR validation workflow exists and passed
          PR_VALIDATION_STATUS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "PR Status Check") | .conclusion')
          
          if [[ "$PR_VALIDATION_STATUS" == "success" ]]; then
            echo "‚úÖ CI validation passed for this commit"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå CI validation not found or failed for this commit"
            echo "PR Validation Status: $PR_VALIDATION_STATUS"
            echo "status=pending" >> $GITHUB_OUTPUT
            
            # List all check runs for debugging
            echo "Available check runs:"
            echo "$CHECK_RUNS" | jq -r '.[] | "\(.name): \(.conclusion // "pending")"'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for CI if pending
        if: steps.check-ci.outputs.status == 'pending'
        run: |
          echo "‚è≥ CI validation is pending. Waiting for completion..."
          
          # Wait up to 10 minutes for CI to complete
          TIMEOUT=600
          ELAPSED=0
          INTERVAL=30
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
            
            echo "‚è±Ô∏è  Checking CI status (${ELAPSED}s/${TIMEOUT}s)..."
            
            CHECK_RUNS=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs --jq '.check_runs')
            PR_VALIDATION_STATUS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "PR Status Check") | .conclusion')
            
            if [[ "$PR_VALIDATION_STATUS" == "success" ]]; then
              echo "‚úÖ CI validation completed successfully"
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            elif [[ "$PR_VALIDATION_STATUS" == "failure" ]]; then
              echo "‚ùå CI validation failed"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "‚è∞ Timeout waiting for CI validation"
          echo "status=timeout" >> $GITHUB_OUTPUT
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Fail if CI not successful
        if: steps.check-ci.outputs.status != 'success'
        run: |
          echo "‚ùå Cannot proceed with release: CI validation did not pass"
          echo "Status: ${{ steps.check-ci.outputs.status }}"
          echo ""
          echo "Release workflow requires successful CI validation before proceeding."
          echo "Please ensure all tests, linting, and build checks pass."
          exit 1

  # Main release job
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: verify-ci
    if: needs.verify-ci.outputs.ci-status == 'success'
    
    # Enhanced permissions for semantic-release
    permissions:
      contents: write        # Required to push git commits and tags
      issues: write          # Required to comment on issues
      pull-requests: write   # Required to comment on PRs
      packages: write        # Required for GitHub Packages (if used)
      actions: read          # Required to read workflow status
      checks: read           # Required to read check status
      discussions: write     # Required for discussions (if used)
    
    outputs:
      released: ${{ steps.semantic-release.outputs.new-release-published }}
      version: ${{ steps.semantic-release.outputs.new-release-version }}
      major: ${{ steps.semantic-release.outputs.new-release-major-version }}
      minor: ${{ steps.semantic-release.outputs.new-release-minor-version }}
      patch: ${{ steps.semantic-release.outputs.new-release-patch-version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Use GITHUB_TOKEN for pushing releases
          token: ${{ secrets.GITHUB_TOKEN }}
          # Configure git user for semantic-release commits
          persist-credentials: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          # Setup npm registry authentication
          registry-url: 'https://registry.npmjs.org'
          # Always use latest npm for releases
          always-auth: true
      
      - name: Configure git for releases
        run: |
          # Configure git user for semantic-release commits
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Verify git configuration
          echo "Git configuration:"
          echo "User: $(git config user.name)"
          echo "Email: $(git config user.email)"
          echo "Remote: $(git remote get-url origin)"
      
      - name: Cache npm dependencies
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-20.x-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-npm-
            ${{ runner.os }}-node-20.x-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          if [[ "${{ steps.npm-cache.outputs.cache-hit }}" == "true" ]]; then
            echo "üì¶ Using cached dependencies"
            # Verify cache integrity
            if ! npm ls --depth=0 &>/dev/null; then
              echo "‚ö†Ô∏è  Cache corrupted, running fresh install"
              rm -rf node_modules
              npm ci
            else
              echo "‚úÖ Cache valid, skipping install"
            fi
          else
            echo "üì• Installing dependencies"
            npm ci
          fi
      
      - name: Build project
        run: |
          echo "üî® Building project for release..."
          npm run clean
          npm run build
          
          # Verify build artifacts
          if [[ ! -f "dist/cli.js" ]]; then
            echo "‚ùå Build failed: CLI entry point not found"
            exit 1
          fi
          
          if [[ ! -f "dist/index.js" ]]; then
            echo "‚ö†Ô∏è  Main entry point not found (may be OK for CLI-only packages)"
          fi
          
          echo "‚úÖ Build completed successfully"
          echo "Build artifacts:"
          find dist -type f | head -10
      
      - name: Verify semantic-release configuration
        run: |
          echo "üîç Verifying semantic-release configuration..."
          
          # Check if .releaserc.json exists and is valid
          if [[ ! -f ".releaserc.json" ]]; then
            echo "‚ùå .releaserc.json not found"
            exit 1
          fi
          
          # Validate JSON syntax
          if ! jq empty .releaserc.json; then
            echo "‚ùå .releaserc.json contains invalid JSON"
            exit 1
          fi
          
          echo "‚úÖ Semantic-release configuration is valid"
          echo "Configuration summary:"
          echo "Branches: $(jq -r '.branches | join(", ")' .releaserc.json)"
          echo "Plugins: $(jq -r '.plugins | length' .releaserc.json)"
          echo "Repository: $(jq -r '.repositoryUrl' .releaserc.json)"
      
      - name: Validate package.json for release
        run: |
          echo "üìã Validating package.json for release..."
          
          # Check required fields
          REQUIRED_FIELDS=("name" "version" "description" "repository" "author" "license")
          
          for field in "${REQUIRED_FIELDS[@]}"; do
            VALUE=$(jq -r ".$field" package.json)
            if [[ "$VALUE" == "null" || "$VALUE" == "" ]]; then
              echo "‚ùå Missing required field: $field"
              exit 1
            else
              echo "‚úÖ $field: $VALUE"
            fi
          done
          
          # Validate NPM package name format
          PACKAGE_NAME=$(jq -r '.name' package.json)
          if [[ ! "$PACKAGE_NAME" =~ ^(@[a-z0-9-~][a-z0-9-._~]*/)?[a-z0-9-~][a-z0-9-._~]*$ ]]; then
            echo "‚ùå Invalid package name format: $PACKAGE_NAME"
            exit 1
          fi
          
          echo "‚úÖ Package.json validation passed"
      
      - name: Run semantic-release
        id: semantic-release
        run: |
          echo "üöÄ Starting semantic-release..."
          
          # Set up environment variables
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Placeholder for NPM_TOKEN (will be configured in Task 014)
          # export NPM_TOKEN="${{ secrets.NPM_TOKEN }}"
          
          # Run semantic-release with detailed logging
          npx semantic-release --debug 2>&1 | tee semantic-release.log
          
          # Check if a release was published
          if grep -q "Published release" semantic-release.log; then
            echo "‚úÖ New release published successfully"
            
            # Extract version information from the log
            NEW_VERSION=$(grep "Published release" semantic-release.log | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1 | sed 's/v//')
            
            if [[ -n "$NEW_VERSION" ]]; then
              echo "new-release-published=true" >> $GITHUB_OUTPUT
              echo "new-release-version=$NEW_VERSION" >> $GITHUB_OUTPUT
              
              # Parse semantic version components
              IFS='.' read -r major minor patch <<< "$NEW_VERSION"
              echo "new-release-major-version=$major" >> $GITHUB_OUTPUT
              echo "new-release-minor-version=$minor" >> $GITHUB_OUTPUT
              echo "new-release-patch-version=$patch" >> $GITHUB_OUTPUT
              
              echo "üì¶ Release version: $NEW_VERSION"
            fi
          else
            echo "‚ÑπÔ∏è  No release published (no relevant changes)"
            echo "new-release-published=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # NPM_TOKEN: ${{ secrets.NPM_TOKEN }}  # Placeholder for Task 014
          # Use explicit Git credentials for semantic-release
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
      
      - name: Upload semantic-release logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semantic-release-logs
          path: |
            semantic-release.log
            .git/refs/tags/*
          retention-days: 30
      
      - name: Handle semantic-release errors
        if: failure()
        run: |
          echo "‚ùå Semantic-release failed"
          echo ""
          echo "=== Error Analysis ==="
          
          # Check for common error patterns
          if grep -q "ENOGHTOKEN" semantic-release.log; then
            echo "üîë GitHub token issue detected"
            echo "‚Ä¢ Verify GITHUB_TOKEN has correct permissions"
            echo "‚Ä¢ Ensure token has: contents:write, issues:write, pull-requests:write"
          fi
          
          if grep -q "ENPMTOKEN" semantic-release.log; then
            echo "üì¶ NPM token issue detected"
            echo "‚Ä¢ NPM_TOKEN secret needs to be configured (Task 014)"
            echo "‚Ä¢ For now, NPM publishing may be disabled"
          fi
          
          if grep -q "ENOTINHISTORY" semantic-release.log; then
            echo "üìú Git history issue detected"
            echo "‚Ä¢ Commit may not follow conventional commit format"
            echo "‚Ä¢ No releasable changes found"
          fi
          
          if grep -q "EGITCOMMIT" semantic-release.log; then
            echo "üîß Git configuration issue detected"
            echo "‚Ä¢ Git user.name and user.email may not be set"
            echo "‚Ä¢ Repository permissions may be insufficient"
          fi
          
          echo ""
          echo "=== Troubleshooting Steps ==="
          echo "1. Check the semantic-release logs artifact for detailed error messages"
          echo "2. Verify all secrets and permissions are correctly configured"
          echo "3. Ensure commits follow conventional commit format"
          echo "4. Review the semantic-release configuration in .releaserc.json"
          echo ""
          echo "=== Recent Log Entries ==="
          tail -20 semantic-release.log || echo "No log file available"
          
          exit 1

  # Post-release notifications and cleanup
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [verify-ci, release]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Post-release summary
        run: |
          echo "üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Release published successfully!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Major**: ${{ needs.release.outputs.major }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Minor**: ${{ needs.release.outputs.minor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Patch**: ${{ needs.release.outputs.patch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Automated Tasks Completed" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Version bumped in package.json" >> $GITHUB_STEP_SUMMARY
          echo "- üìù Changelog updated (CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
          echo "- üè∑Ô∏è Git tag created" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ NPM package prepared (publishing in Task 014)" >> $GITHUB_STEP_SUMMARY
          echo "- üí¨ Issues and PRs notified" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Package on NPM](https://www.npmjs.com/package/@e0ipso/ai-task-manager) _(pending Task 014)_" >> $GITHUB_STEP_SUMMARY
      
      - name: Performance metrics
        run: |
          echo "=== Release Performance Metrics ==="
          echo "Release Version: ${{ needs.release.outputs.version }}"
          echo "Workflow Trigger: push to ${{ github.ref_name }}"
          echo "Total Workflow Duration: ${{ github.run_number }} minutes (approx)"
          echo "CI Status: ${{ needs.verify-ci.outputs.ci-status }}"
          echo "Release Status: ${{ needs.release.outputs.released }}"
          echo "Repository: ${{ github.repository }}"
          echo "============================"

  # Handle failed releases
  release-failure:
    name: Handle Release Failure
    runs-on: ubuntu-latest
    needs: [verify-ci, release]
    if: always() && (needs.verify-ci.result == 'failure' || needs.release.result == 'failure')
    
    steps:
      - name: Release failure summary
        run: |
          echo "‚ùå Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**The automated release process encountered an error.**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Failure Details" >> $GITHUB_STEP_SUMMARY
          echo "- **CI Verification**: ${{ needs.verify-ci.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Process**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. üîç Review the workflow logs above for specific error messages" >> $GITHUB_STEP_SUMMARY
          echo "2. üîß Check if all required secrets and permissions are configured" >> $GITHUB_STEP_SUMMARY
          echo "3. üìù Verify commit messages follow conventional commit format" >> $GITHUB_STEP_SUMMARY
          echo "4. üß™ Ensure all CI tests are passing before pushing to main" >> $GITHUB_STEP_SUMMARY
          echo "5. üìã Review semantic-release configuration in .releaserc.json" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Release Option" >> $GITHUB_STEP_SUMMARY
          echo "If automated release continues to fail, consider:" >> $GITHUB_STEP_SUMMARY
          echo "- Running \`npx semantic-release --dry-run\` locally to debug" >> $GITHUB_STEP_SUMMARY
          echo "- Triggering manual release via GitHub CLI or web interface" >> $GITHUB_STEP_SUMMARY
          echo "- Reviewing repository settings and branch protection rules" >> $GITHUB_STEP_SUMMARY
      
      - name: Create issue on repeated failures
        if: github.run_attempt > 1
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Automated Release Failure - Attempt ${{ github.run_attempt }}`;
            const body = `
            ## Release Failure Report
            
            The automated release workflow has failed multiple times.
            
            ### Details
            - **Workflow Run**: ${{ github.run_id }}
            - **Attempt**: ${{ github.run_attempt }}
            - **Branch**: ${{ github.ref_name }}
            - **Commit**: ${{ github.sha }}
            - **CI Status**: ${{ needs.verify-ci.result }}
            - **Release Status**: ${{ needs.release.result }}
            
            ### Failure Analysis
            - CI Verification: ${{ needs.verify-ci.result }}
            - Release Process: ${{ needs.release.result }}
            
            ### Action Required
            This issue requires manual investigation to resolve the release automation problems.
            
            ### Resources
            - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Semantic Release Documentation](https://semantic-release.gitbook.io/semantic-release/)
            - [Conventional Commits](https://conventionalcommits.org/)
            
            ---
            ü§ñ This issue was automatically created by the release workflow.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'ci/cd', 'release']
            });